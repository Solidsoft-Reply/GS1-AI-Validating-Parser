// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.Parsers.Gs1Ai.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ErrorsFeature : object, Xunit.IClassFixture<ErrorsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Errors", @"A short summary of the feature

No data provided.
Entity is incorrectly terminated with an FNC1.
Fixed-width entity does not contain sufficient number of characters.
--Validation for AI {0} timed out.
--The entity value cannot be null for AI {0}.
The value{0} is invalid for AI {1}.
Invalid application identifier {0}.
The GTIN value{0} has an invalid checksum.
The value{0} does not match the specified pattern for the data element.
--The implied decimal point position (inverse exponent) is specified incorrectly.
--No entity value provided.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Errors.feature"
#line hidden
        
        public ErrorsFeature(ErrorsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger a \'no data provided\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger a \'no data provided\' error")]
        public async System.Threading.Tasks.Task TriggerANoDataProvidedError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger a \'no data provided\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
 await testRunner.GivenAsync("a request to parse data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
 await testRunner.WhenAsync("the input submitted to the parser is empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
     await testRunner.AndAsync("the errors should include a fatal 2001 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.GivenAsync("a request to parse data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
 await testRunner.WhenAsync("the input submitted to the parser is null", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 26
     await testRunner.AndAsync("the errors should include a fatal 2001 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger an \'entity is incorrectly terminated with an FNC1\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger an \'entity is incorrectly terminated with an FNC1\' error")]
        public async System.Threading.Tasks.Task TriggerAnEntityIsIncorrectlyTerminatedWithAnFNC1Error()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger an \'entity is incorrectly terminated with an FNC1\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
 await testRunner.GivenAsync("a request to parse data", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
 await testRunner.WhenAsync("the AI of 01 is incorrectly terminated with an FNC and the value is 1234567890123" +
                        "1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
     await testRunner.AndAsync("the errors should include a non-fatal 2003 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger a \'fixed-width entity does not contain sufficient number of characters\' e" +
            "rror")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger a \'fixed-width entity does not contain sufficient number of characters\' e" +
            "rror")]
        public async System.Threading.Tasks.Task TriggerAFixed_WidthEntityDoesNotContainSufficientNumberOfCharactersError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger a \'fixed-width entity does not contain sufficient number of characters\' e" +
                    "rror", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.GivenAsync("the input is 011234567890123", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
     await testRunner.AndAsync("the errors should include a non-fatal 2004 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.GivenAsync("the input is 01", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
     await testRunner.AndAsync("the errors should include a non-fatal 2004 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger an \'invalid application identifier {0}\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger an \'invalid application identifier {0}\' error")]
        public async System.Threading.Tasks.Task TriggerAnInvalidApplicationIdentifier0Error()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger an \'invalid application identifier {0}\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
 await testRunner.GivenAsync("the input is 38SomeValue", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 49
     await testRunner.AndAsync("the errors should include a fatal 2002 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        public async System.Threading.Tasks.Task TriggerATheGTINValue0HasAnInvalidChecksumError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger a \'the GTIN value{0} has an invalid checksum\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
 await testRunner.GivenAsync("the input is 0112345678901233", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
     await testRunner.AndAsync("the errors should include a non-fatal 2008 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="2 Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "2 Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        public async System.Threading.Tasks.Task _2TriggerATheGTINValue0HasAnInvalidChecksumError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("2 Trigger a \'the GTIN value{0} has an invalid checksum\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 58
 await testRunner.GivenAsync("the input is 2531234567890123", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
  await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
  await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
   await testRunner.AndAsync("the errors should include a non-fatal 2009 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3 Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "3 Trigger a \'the GTIN value{0} has an invalid checksum\' error")]
        public async System.Threading.Tasks.Task _3TriggerATheGTINValue0HasAnInvalidChecksumError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3 Trigger a \'the GTIN value{0} has an invalid checksum\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 64
 await testRunner.GivenAsync("the input is 800301234567890123", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
  await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
  await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
   await testRunner.AndAsync("the errors should include a non-fatal 2010 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger a \'the value{0} does not match the specified pattern for the data element" +
            "\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger a \'the value{0} does not match the specified pattern for the data element" +
            "\' error")]
        public async System.Threading.Tasks.Task TriggerATheValue0DoesNotMatchTheSpecifiedPatternForTheDataElementError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger a \'the value{0} does not match the specified pattern for the data element" +
                    "\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 70
 await testRunner.GivenAsync("the input is 01ABCDEFGHIJKLMN", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
 await testRunner.ThenAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
     await testRunner.AndAsync("the errors should include a non-fatal 2100 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Trigger a \'the implied decimal point position (inverse exponent) is specified inc" +
            "orrectly\' error")]
        [Xunit.TraitAttribute("FeatureTitle", "Errors")]
        [Xunit.TraitAttribute("Description", "Trigger a \'the implied decimal point position (inverse exponent) is specified inc" +
            "orrectly\' error")]
        public async System.Threading.Tasks.Task TriggerATheImpliedDecimalPointPositionInverseExponentIsSpecifiedIncorrectlyError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Trigger a \'the implied decimal point position (inverse exponent) is specified inc" +
                    "orrectly\' error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 76
 await testRunner.GivenAsync("the input is 310A234567", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 77
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.ThenAsync("the entity should be 310", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 79
     await testRunner.AndAsync("there should be errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
     await testRunner.AndAsync("the errors should include a non-fatal 2011 error", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ErrorsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ErrorsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
