// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.Parsers.Gs1Ai.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IBANValuesFeature : object, Xunit.IClassFixture<IBANValuesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Iban.feature"
#line hidden
        
        public IBANValuesFeature(IBANValuesFeature.FixtureData fixtureData, Solidsoft_Reply_Parsers_Gs1Ai_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IBANValues", "Tests for valid boundary conditions and character sets.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="CountryIbanValues")]
        [Xunit.TraitAttribute("FeatureTitle", "IBANValues")]
        [Xunit.TraitAttribute("Description", "CountryIbanValues")]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "AL47212110090000000235698741", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "AD1200012030200359100100", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "AT611904300234573201", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BY13NBRB3600900000002Z00AB00", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BE68539007547034", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BA391290079401028494", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BG80BNBG96611020345678", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "HR1210010051863000160", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "CY17002001280000001200527600", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "CZ6508000000192000145399", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "DK5000400440116243", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "EE382200221020145685", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "FO2000400440116243", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "FI2112345600000785", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "FR1420041010050500013M02606", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "DE89370400440532013000", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GI75NWBK000000007099453", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GR1601101250000000012300695", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GL2000400440116243", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "HU42117730161111101800000000", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "IS140159260076545510730339", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "IE29AIBK93115212345678", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "IT60X0542811101000000123456", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "XK051212012345678906", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LV80BANK0000435195001", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LI21088100002324013AA", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LT121000011101001000", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LU280019400644750000", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MK07250120000058984", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MT84MALT011000012345MTLCAST001S", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MD24AG000225100013104168", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MC5811222000010123456789030", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "ME25505000012345678951", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "NL91ABNA0417164300", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "NO9386011117947", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "PL61109010140000071219812874", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "PT50000101231234567890192", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "RO49AAAA1B31007593840000", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "RS35260005601001611379", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "SK3112000000198742637541", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "SI56191000000123438", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "ES9121000418450200051332", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "SE4550000000058398257466", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "CH9300762011623852957", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GB29NWBK60161331926819", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "AZ21NABZ00000000137010001944", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BH67BMAG00001299123456", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "BR1800000000141455123924100C2", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "VG96VPVG0000012345678901", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "CR05015202001026284066", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "DO28BAGR00000001212453611324", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "SV62CENR00000000000000700025", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GE29NB0000000101904917", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "GT82TRAJ01020000001210029690", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "IQ98NBIQ850123456789012", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "IL620108000000099999999", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "JO94CBJO0010000000000131000302", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "KZ86125KZT5004100100", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "KW81CBKU0000000000001234560101", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LB62099900000001001901229114", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MR1300020001010000123456753", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "MU17BOMM0101101030300200000MUR", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "PK36SCBL0000001123456702", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "PS92PALS000000000400123456702", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "QA73BBME000000000004056677001", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "LC55HEMM000100010012001200023015", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "ST68000100010051845310112", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "SA0380000000608010167519", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "TL380080012345678910157", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "TN5910006035183598478831", new string[0])]
        [Xunit.InlineDataAttribute("@N4+X..34", "8007", "", "TR330006100519786457841326", new string[0])]
        public void CountryIbanValues(string pattern, string ai, string invexporseq, string countvalue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("pattern", pattern);
            argumentsOfScenario.Add("ai", ai);
            argumentsOfScenario.Add("invexporseq", invexporseq);
            argumentsOfScenario.Add("countvalue", countvalue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CountryIbanValues", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("the input is {0}{1}{2}", ai, invexporseq, countvalue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the entity should be {0}", ai), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
     testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IBANValuesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IBANValuesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
