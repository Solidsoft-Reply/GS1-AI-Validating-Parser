// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.Parsers.Gs1Ai.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ParseEntityFeature : object, Xunit.IClassFixture<ParseEntityFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ParseEntity.feature"
#line hidden
        
        public ParseEntityFeature(ParseEntityFeature.FixtureData fixtureData, Solidsoft_Reply_Parsers_Gs1Ai_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ParseEntity", "Basic tests for each GS1 entity, based on the GS1 General Specifications.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SSCO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SSCO")]
        [Xunit.TraitAttribute("Category", "N2+N18")]
        public void ParseSSCO()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SSCO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("the input is 00001234560000000018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("the entity should be 00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
     testRunner.And("the AI should be 00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
  testRunner.And("the value should be 001234560000000018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
  testRunner.And("the data value should be SSCC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
  testRunner.And("the description should be Identification of a logistic unit (SSCC)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GTIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GTIN")]
        [Xunit.TraitAttribute("Category", "N2+N14")]
        public void ParseGTIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GTIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("the input is 0112345678901231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("the entity should be 01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
     testRunner.And("the AI should be 01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
  testRunner.And("the value should be 12345678901231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
  testRunner.And("the data value should be GTIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
  testRunner.And("the description should be Identification of a trade item (GTIN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CONTENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CONTENT")]
        [Xunit.TraitAttribute("Category", "N2+N14")]
        public void ParseCONTENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CONTENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("the input is 0212345678901231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("the entity should be 02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
     testRunner.And("the AI should be 02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
  testRunner.And("the value should be 12345678901231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
  testRunner.And("the data value should be CONTENT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
  testRunner.And("the description should be Identification of trade items contained in a logistic u" +
                        "nit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BATCH/LOT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BATCH/LOT")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public void ParseBATCHLOT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse BATCH/LOT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given("the input is 10ABC123D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then("the entity should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
     testRunner.And("the AI should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
  testRunner.And("the value should be ABC123D", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
  testRunner.And("the data value should be BATCH/LOT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
  testRunner.And("the description should be Batch or lot number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParsePRODDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROD DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("the input is 11231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the entity should be 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
     testRunner.And("the AI should be 11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
  testRunner.And("the data value should be PROD DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
  testRunner.And("the description should be Production date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DUE DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DUE DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParseDUEDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse DUE DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
 testRunner.Given("the input is 12231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then("the entity should be 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
     testRunner.And("the AI should be 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
  testRunner.And("the data value should be DUE DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
  testRunner.And("the description should be Due date for amount on payment slip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PACK DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PACK DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParsePACKDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PACK DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
 testRunner.Given("the input is 13231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the entity should be 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
     testRunner.And("the AI should be 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
  testRunner.And("the data value should be PACK DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
  testRunner.And("the description should be Packaging date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BEST BEFORE or BEST BY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BEST BEFORE or BEST BY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParseBESTBEFOREOrBESTBY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse BEST BEFORE or BEST BY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 91
 testRunner.Given("the input is 15231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("the entity should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
     testRunner.And("the AI should be 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
  testRunner.And("the data value should be BEST BEFORE or BEST BY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
  testRunner.And("the description should be Best before date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SELL BY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SELL BY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParseSELLBY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SELL BY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 103
 testRunner.Given("the input is 16231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("the entity should be 16", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
     testRunner.And("the AI should be 16", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
  testRunner.And("the data value should be SELL BY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
  testRunner.And("the description should be Sell by date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse USE BY OR EXPIRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse USE BY OR EXPIRY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public void ParseUSEBYOREXPIRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse USE BY OR EXPIRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
 testRunner.Given("the input is 17231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.Then("the entity should be 17", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
     testRunner.And("the AI should be 17", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
  testRunner.And("the data value should be USE BY OR EXPIRY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
  testRunner.And("the description should be Expiration date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VARIANT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VARIANT")]
        [Xunit.TraitAttribute("Category", "N2+N2")]
        public void ParseVARIANT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VARIANT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 127
 testRunner.Given("the input is 2001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then("the entity should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
     testRunner.And("the AI should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
  testRunner.And("the value should be 01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
  testRunner.And("the data value should be VARIANT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
  testRunner.And("the description should be Internal product variant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SERIAL")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public void ParseSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 139
 testRunner.Given("the input is 217337203174393624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Then("the entity should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
     testRunner.And("the AI should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
  testRunner.And("the value should be 7337203174393624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
  testRunner.And("the data value should be SERIAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
  testRunner.And("the description should be Serial number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPV")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPV")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public void ParseCPV()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CPV", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 151
 testRunner.Given("the input is 22733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
 testRunner.Then("the entity should be 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
     testRunner.And("the AI should be 22", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
  testRunner.And("the value should be 733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
  testRunner.And("the data value should be CPV", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
  testRunner.And("the description should be Consumer product variant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse TPX")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse TPX")]
        [Xunit.TraitAttribute("Category", "N3+X..28")]
        public void ParseTPX()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..28"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse TPX", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 163
 testRunner.Given("the input is 235733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Then("the entity should be 235", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
     testRunner.And("the AI should be 235", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
  testRunner.And("the value should be 733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
  testRunner.And("the data value should be TPX", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
  testRunner.And("the description should be Third Party Controlled, Serialised Extension of Global " +
                        "Trade Item Number (GTIN) (TPX)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ADDITIONAL ID")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ADDITIONAL ID")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseADDITIONALID()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ADDITIONAL ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 175
 testRunner.Given("the input is 240This+is+some+identifier+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
 testRunner.Then("the entity should be 240", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
     testRunner.And("the AI should be 240", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
  testRunner.And("the value should be This+is+some+identifier+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
  testRunner.And("the data value should be ADDITIONAL ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
  testRunner.And("the description should be Additional product identification assigned by the manuf" +
                        "acturer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CUST. PART No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CUST. PART No.")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseCUST_PARTNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CUST. PART No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 187
 testRunner.Given("the input is 241This+is+some+part+no+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 189
 testRunner.Then("the entity should be 241", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
     testRunner.And("the AI should be 241", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
  testRunner.And("the value should be This+is+some+part+no+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
  testRunner.And("the data value should be CUST. PART No.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
  testRunner.And("the description should be Customer part number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MTO VARIANT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MTO VARIANT")]
        [Xunit.TraitAttribute("Category", "N3+N..6")]
        public void ParseMTOVARIANT()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N..6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse MTO VARIANT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 199
 testRunner.Given("the input is 2421234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 200
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.Then("the entity should be 242", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 202
     testRunner.And("the AI should be 242", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
  testRunner.And("the value should be 1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
  testRunner.And("the data value should be MTO VARIANT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
  testRunner.And("the description should be Made-to-Order variation number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PCN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PCN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParsePCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PCN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given("the input is 243This+is+some+pcn+123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 213
 testRunner.Then("the entity should be 243", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
     testRunner.And("the AI should be 243", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
  testRunner.And("the value should be This+is+some+pcn+123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
  testRunner.And("the data value should be PCN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
  testRunner.And("the description should be Packaging component number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SECONDARY SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SECONDARY SERIAL")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseSECONDARYSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SECONDARY SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 223
 testRunner.Given("the input is 250733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
 testRunner.Then("the entity should be 250", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
     testRunner.And("the AI should be 250", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
  testRunner.And("the value should be 733AC720317439R3624", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
  testRunner.And("the data value should be SECONDARY SERIAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
  testRunner.And("the description should be Secondary serial number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REF. TO SOURCE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REF. TO SOURCE")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseREF_TOSOURCE()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse REF. TO SOURCE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 235
 testRunner.Given("the input is 251This+is+some+reference+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 236
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
 testRunner.Then("the entity should be 251", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
     testRunner.And("the AI should be 251", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
  testRunner.And("the value should be This+is+some+reference+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
  testRunner.And("the data value should be REF. TO SOURCE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
  testRunner.And("the description should be Reference to source entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GDTI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GDTI")]
        [Xunit.TraitAttribute("Category", "N3+N13[+X..17]")]
        public void ParseGDTI()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13[+X..17]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GDTI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 247
 testRunner.Given("the input is 2531234567890128733AC720317439R36", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 248
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 249
 testRunner.Then("the entity should be 253", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 250
     testRunner.And("the AI should be 253", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
  testRunner.And("the value should be 1234567890128733AC720317439R36", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
  testRunner.And("the data value should be GDTI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
  testRunner.And("the description should be Global Document Type Identifier (GDTI)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 255
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GLN EXTENSION COMPONENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GLN EXTENSION COMPONENT")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseGLNEXTENSIONCOMPONENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GLN EXTENSION COMPONENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 259
 testRunner.Given("the input is 254Gln+Extension+254", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 260
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.Then("the entity should be 254", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 262
     testRunner.And("the AI should be 254", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
  testRunner.And("the value should be Gln+Extension+254", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
  testRunner.And("the data value should be GLN EXTENSION COMPONENT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
  testRunner.And("the description should be Global Location Number (GLN) extension component", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 266
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse Global Coupon Number (GCN)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse Global Coupon Number (GCN)")]
        [Xunit.TraitAttribute("Category", "N3+N13[+N..12]")]
        public void ParseGlobalCouponNumberGCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13[+N..12]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse Global Coupon Number (GCN)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 270
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 271
 testRunner.Given("the input is 2551234567890128733720317439", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 272
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 273
 testRunner.Then("the entity should be 255", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 274
     testRunner.And("the AI should be 255", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 275
  testRunner.And("the value should be 1234567890128733720317439", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
  testRunner.And("the data value should be GCN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
  testRunner.And("the description should be Global Coupon Number (GCN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VAR. COUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VAR. COUNT")]
        [Xunit.TraitAttribute("Category", "N2+N..8")]
        public void ParseVAR_COUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N..8"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VAR. COUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 283
 testRunner.Given("the input is 30000999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 284
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 285
 testRunner.Then("the entity should be 30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 286
     testRunner.And("the AI should be 30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
  testRunner.And("the value should be 000999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
  testRunner.And("the data value should be VAR. COUNT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
  testRunner.And("the description should be Variable count of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (kg)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (kg)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETWEIGHTKg()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET WEIGHT (kg)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 295
 testRunner.Given("the input is 3102123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 296
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 297
 testRunner.Then("the entity should be 310", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 298
     testRunner.And("the AI should be 3102", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 301
  testRunner.And("the data value should be NET WEIGHT (kg)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 302
  testRunner.And("the description should be Net weight, kilograms (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 308
 testRunner.Given("the input is 3112123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 309
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 310
 testRunner.Then("the entity should be 311", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 311
     testRunner.And("the AI should be 3112", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 312
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 314
  testRunner.And("the data value should be LENGTH (m)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 315
  testRunner.And("the description should be Length or first dimension, metres (variable measure tra" +
                        "de item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 316
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 320
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 321
 testRunner.Given("the input is 3122123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 322
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
 testRunner.Then("the entity should be 312", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 324
     testRunner.And("the AI should be 3122", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
  testRunner.And("the data value should be WIDTH (m)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
  testRunner.And("the description should be Width, diameter, or second dimension, metres (variable " +
                        "measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 330
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 333
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 334
 testRunner.Given("the input is 3132123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 335
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 336
 testRunner.Then("the entity should be 313", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 337
     testRunner.And("the AI should be 3132", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 339
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 340
  testRunner.And("the data value should be HEIGHT (m)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
  testRunner.And("the description should be Depth, thickness, height, or third dimension, metres (v" +
                        "ariable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 342
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (m²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (m²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (m²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 346
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 347
 testRunner.Given("the input is 3142123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 348
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 349
 testRunner.Then("the entity should be 314", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 350
     testRunner.And("the AI should be 3142", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 351
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 352
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 353
  testRunner.And("the data value should be AREA (m²)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 354
  testRunner.And("the description should be Area, square metres (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 356
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (l)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (l)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETVOLUMEL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET VOLUME (l)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 359
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 360
 testRunner.Given("the input is 3152123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 361
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 362
 testRunner.Then("the entity should be 315", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 363
     testRunner.And("the AI should be 3152", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 364
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 366
  testRunner.And("the data value should be NET VOLUME (l)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 367
  testRunner.And("the description should be Net volume, litres (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 368
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 369
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (m³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (m³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETVOLUMEM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET VOLUME (m³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 372
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 373
 testRunner.Given("the input is 3162123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 374
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 375
 testRunner.Then("the entity should be 316", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 376
     testRunner.And("the AI should be 3162", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 377
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 379
  testRunner.And("the data value should be NET VOLUME (m³)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 380
  testRunner.And("the description should be Net volume, cubic metres (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 381
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 382
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (lb)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (lb)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETWEIGHTLb()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET WEIGHT (lb)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 385
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 386
 testRunner.Given("the input is 3202123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 387
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 388
 testRunner.Then("the entity should be 320", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 389
     testRunner.And("the AI should be 3202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 390
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 391
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 392
  testRunner.And("the data value should be NET WEIGHT (lb)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 393
  testRunner.And("the description should be Net weight, pounds (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 394
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 395
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 398
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 399
 testRunner.Given("the input is 3212123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 400
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 401
 testRunner.Then("the entity should be 321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 402
     testRunner.And("the AI should be 3212", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 403
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 404
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 405
  testRunner.And("the data value should be LENGTH (i)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 406
  testRunner.And("the description should be Length or first dimension, inches (variable measure tra" +
                        "de item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 407
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 411
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 412
 testRunner.Given("the input is 3222123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 413
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 414
 testRunner.Then("the entity should be 322", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 415
     testRunner.And("the AI should be 3222", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 416
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 417
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 418
  testRunner.And("the data value should be LENGTH (f)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
  testRunner.And("the description should be Length or first dimension, feet (variable measure trade" +
                        " item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 420
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 421
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 424
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 425
 testRunner.Given("the input is 3232123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 426
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 427
 testRunner.Then("the entity should be 323", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 428
     testRunner.And("the AI should be 3232", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 429
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 431
  testRunner.And("the data value should be LENGTH (y)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
  testRunner.And("the description should be Length or first dimension, yards (variable measure trad" +
                        "e item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 433
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 434
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 437
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 438
 testRunner.Given("the input is 3242123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 439
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 440
 testRunner.Then("the entity should be 324", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 441
     testRunner.And("the AI should be 3242", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 442
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 443
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 444
  testRunner.And("the data value should be WIDTH (i)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 445
  testRunner.And("the description should be Width, diameter, or second dimension, inches (variable " +
                        "measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 447
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 450
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 451
 testRunner.Given("the input is 3252123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 452
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 453
 testRunner.Then("the entity should be 325", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 454
     testRunner.And("the AI should be 3252", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 455
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 456
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 457
  testRunner.And("the data value should be WIDTH (f)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 458
  testRunner.And("the description should be Width, diameter, or second dimension, feet (variable me" +
                        "asure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 459
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 460
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 463
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 464
 testRunner.Given("the input is 3262123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 465
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 466
 testRunner.Then("the entity should be 326", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 467
     testRunner.And("the AI should be 3262", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 468
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 469
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 470
  testRunner.And("the data value should be WIDTH (y)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 471
  testRunner.And("the description should be Width, diameter, or second dimension, yards (variable m" +
                        "easure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 472
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 473
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 476
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 477
 testRunner.Given("the input is 3272123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 478
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 479
 testRunner.Then("the entity should be 327", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 480
     testRunner.And("the AI should be 3272", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 481
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 482
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 483
  testRunner.And("the data value should be HEIGHT (i)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 484
  testRunner.And("the description should be Depth, thickness, height, or third dimension, inches (v" +
                        "ariable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 485
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 486
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 489
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 490
 testRunner.Given("the input is 3282123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 491
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 492
 testRunner.Then("the entity should be 328", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 493
     testRunner.And("the AI should be 3282", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 494
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 495
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 496
  testRunner.And("the data value should be HEIGHT (f)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 497
  testRunner.And("the description should be Depth, thickness, height, or third dimension, feet (var" +
                        "iable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 498
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 499
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 502
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 503
 testRunner.Given("the input is 3292123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 504
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 505
 testRunner.Then("the entity should be 329", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 506
     testRunner.And("the AI should be 3292", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 507
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 508
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 509
  testRunner.And("the data value should be HEIGHT (y)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 510
  testRunner.And("the description should be Depth, thickness, height, or third dimension, yards (va" +
                        "riable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 511
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 512
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GROSS WEIGHT (kg)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GROSS WEIGHT (kg)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseGROSSWEIGHTKg()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GROSS WEIGHT (kg)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 515
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 516
 testRunner.Given("the input is 3302123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 517
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 518
 testRunner.Then("the entity should be 330", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 519
     testRunner.And("the AI should be 3302", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 520
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 521
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 522
  testRunner.And("the data value should be GROSS WEIGHT (kg)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 523
  testRunner.And("the description should be Logistic weight, kilograms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 524
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 525
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 528
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 529
 testRunner.Given("the input is 3312123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 530
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 531
 testRunner.Then("the entity should be 331", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 532
     testRunner.And("the AI should be 3312", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 533
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 534
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 535
  testRunner.And("the data value should be LENGTH (m), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 536
  testRunner.And("the description should be Length or first dimension, metres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 537
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 538
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 541
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 542
 testRunner.Given("the input is 3322123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 543
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 544
 testRunner.Then("the entity should be 332", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 545
     testRunner.And("the AI should be 3322", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 546
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 547
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 548
  testRunner.And("the data value should be WIDTH (m), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 549
  testRunner.And("the description should be Width, diameter, or second dimension, metres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 550
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 551
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 554
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 555
 testRunner.Given("the input is 3332123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 556
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 557
 testRunner.Then("the entity should be 333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 558
     testRunner.And("the AI should be 3332", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 559
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 560
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 561
  testRunner.And("the data value should be HEIGHT (m), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 562
  testRunner.And("the description should be Depth, thickness, height, or third dimension, metres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 563
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 564
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (m²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (m²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (m²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 567
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 568
 testRunner.Given("the input is 3342123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 569
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 570
 testRunner.Then("the entity should be 334", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 571
     testRunner.And("the AI should be 3342", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 572
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 573
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 574
  testRunner.And("the data value should be AREA (m²), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 575
  testRunner.And("the description should be Area, square metres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 576
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 577
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (l), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (l), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMELLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (l), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 580
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 581
 testRunner.Given("the input is 3352123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 582
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 583
 testRunner.Then("the entity should be 335", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 584
     testRunner.And("the AI should be 3352", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 585
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 586
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 587
  testRunner.And("the data value should be VOLUME (l), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 588
  testRunner.And("the description should be Logistic volume, litres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 589
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 590
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (m³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (m³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (m³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 593
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 594
 testRunner.Given("the input is 3362123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 595
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 596
 testRunner.Then("the entity should be 336", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 597
     testRunner.And("the AI should be 3362", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 598
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 599
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 600
  testRunner.And("the data value should be VOLUME (m³), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 601
  testRunner.And("the description should be Logistic volume, cubic metres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 602
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 603
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse KG PER m²")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse KG PER m²")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseKGPERM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse KG PER m²", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 606
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 607
 testRunner.Given("the input is 3372123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 608
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 609
 testRunner.Then("the entity should be 337", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 610
     testRunner.And("the AI should be 3372", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 611
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 612
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 613
  testRunner.And("the data value should be KG PER m²", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 614
  testRunner.And("the description should be Kilograms per square metre", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 615
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 616
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GROSS WEIGHT (lb)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GROSS WEIGHT (lb)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseGROSSWEIGHTLb()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GROSS WEIGHT (lb)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 619
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 620
 testRunner.Given("the input is 3402123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 621
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 622
 testRunner.Then("the entity should be 340", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 623
     testRunner.And("the AI should be 3402", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 624
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 625
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 626
  testRunner.And("the data value should be GROSS WEIGHT (lb)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 627
  testRunner.And("the description should be Logistic weight, pounds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 628
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 629
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 632
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 633
 testRunner.Given("the input is 3412123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 634
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 635
 testRunner.Then("the entity should be 341", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 636
     testRunner.And("the AI should be 3412", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 637
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 638
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 639
  testRunner.And("the data value should be LENGTH (i), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 640
  testRunner.And("the description should be Length or first dimension, inches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 641
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 642
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 645
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 646
 testRunner.Given("the input is 3422123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 647
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 648
 testRunner.Then("the entity should be 342", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 649
     testRunner.And("the AI should be 3422", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 650
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 651
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 652
  testRunner.And("the data value should be LENGTH (f), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 653
  testRunner.And("the description should be Length or first dimension, feet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 654
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 655
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseLENGTHYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LENGTH (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 658
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 659
 testRunner.Given("the input is 3432123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 660
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 661
 testRunner.Then("the entity should be 343", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 662
     testRunner.And("the AI should be 3432", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 663
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 664
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 665
  testRunner.And("the data value should be LENGTH (y), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 666
  testRunner.And("the description should be Length or first dimension, yards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 667
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 668
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 671
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 672
 testRunner.Given("the input is 3442123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 673
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 674
 testRunner.Then("the entity should be 344", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 675
     testRunner.And("the AI should be 3442", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 676
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 677
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 678
  testRunner.And("the data value should be WIDTH (i), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 679
  testRunner.And("the description should be Width, diameter, or second dimension, inches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 680
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 681
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 686
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 687
 testRunner.Given("the input is 3452123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 688
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 689
 testRunner.Then("the entity should be 345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 690
     testRunner.And("the AI should be 3452", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 691
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 692
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 693
  testRunner.And("the data value should be WIDTH (f), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 694
  testRunner.And("the description should be Width, diameter, or second dimension, feet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 695
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 696
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseWIDTHYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse WIDTH (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 699
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 700
 testRunner.Given("the input is 3462123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 701
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 702
 testRunner.Then("the entity should be 346", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 703
     testRunner.And("the AI should be 3462", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 704
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 705
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 706
  testRunner.And("the data value should be WIDTH (y), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 707
  testRunner.And("the description should be Width, diameter, or second dimension, yard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 708
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 709
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 712
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 713
 testRunner.Given("the input is 3472123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 714
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 715
 testRunner.Then("the entity should be 347", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 716
     testRunner.And("the AI should be 3472", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 717
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 718
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 719
  testRunner.And("the data value should be HEIGHT (i), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 720
  testRunner.And("the description should be Depth, thickness, height, or third dimension, inches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 721
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 722
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 725
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 726
 testRunner.Given("the input is 3482123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 727
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 728
 testRunner.Then("the entity should be 348", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 729
     testRunner.And("the AI should be 3482", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 730
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 731
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 732
  testRunner.And("the data value should be HEIGHT (f), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 733
  testRunner.And("the description should be Depth, thickness, height, or third dimension, feet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 734
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 735
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseHEIGHTYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HEIGHT (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 738
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 739
 testRunner.Given("the input is 3492123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 740
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 741
 testRunner.Then("the entity should be 349", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 742
     testRunner.And("the AI should be 3492", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 743
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 744
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 745
  testRunner.And("the data value should be HEIGHT (y), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 746
  testRunner.And("the description should be Depth, thickness, height, or third dimension, yards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 747
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 748
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (i²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (i²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (i²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 751
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 752
 testRunner.Given("the input is 3502123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 753
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 754
 testRunner.Then("the entity should be 350", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 755
     testRunner.And("the AI should be 3502", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 756
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 757
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 758
  testRunner.And("the data value should be AREA (i²)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 759
  testRunner.And("the description should be Area, square inches (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 760
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 761
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (f²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (f²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (f²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 764
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 765
 testRunner.Given("the input is 3512123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 766
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 767
 testRunner.Then("the entity should be 351", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 768
     testRunner.And("the AI should be 3512", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 769
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 770
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 771
  testRunner.And("the data value should be AREA (f²)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 772
  testRunner.And("the description should be Area, square feet (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 773
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 774
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (y²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (y²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (y²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 777
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 778
 testRunner.Given("the input is 3522123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 779
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 780
 testRunner.Then("the entity should be 352", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 781
     testRunner.And("the AI should be 3522", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 782
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 783
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 784
  testRunner.And("the data value should be AREA (y²)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 785
  testRunner.And("the description should be Area, square yards (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 786
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 787
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (i²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (i²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (i²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 790
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 791
 testRunner.Given("the input is 3532123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 792
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 793
 testRunner.Then("the entity should be 353", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 794
     testRunner.And("the AI should be 3532", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 795
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 796
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 797
  testRunner.And("the data value should be AREA (i²), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 798
  testRunner.And("the description should be Area, square inches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 799
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 800
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (f²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (f²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (f²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 803
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 804
 testRunner.Given("the input is 3542123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 805
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 806
 testRunner.Then("the entity should be 354", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 807
     testRunner.And("the AI should be 3542", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 808
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 809
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 810
  testRunner.And("the data value should be AREA (f²), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 811
  testRunner.And("the description should be Area, square feet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 812
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 813
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (y²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (y²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseAREAYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AREA (y²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 816
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 817
 testRunner.Given("the input is 3552123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 818
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 819
 testRunner.Then("the entity should be 355", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 820
     testRunner.And("the AI should be 3552", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 821
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 822
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 823
  testRunner.And("the data value should be AREA (y²), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 824
  testRunner.And("the description should be Area, square yards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 825
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 826
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (t)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (t)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETWEIGHTT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET WEIGHT (t)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 829
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 830
 testRunner.Given("the input is 3562123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 831
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 832
 testRunner.Then("the entity should be 356", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 833
     testRunner.And("the AI should be 3562", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 834
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 835
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 836
  testRunner.And("the data value should be NET WEIGHT (t)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 837
  testRunner.And("the description should be Net weight, troy ounces (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 838
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 839
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (oz)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (oz)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETVOLUMEOz()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET VOLUME (oz)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 842
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 843
 testRunner.Given("the input is 3572123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 844
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 845
 testRunner.Then("the entity should be 357", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 846
     testRunner.And("the AI should be 3572", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 847
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 848
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 849
  testRunner.And("the data value should be NET VOLUME (oz)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 850
  testRunner.And("the description should be Net weight (or volume), ounces (variable measure trade " +
                        "item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 851
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 852
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (q)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (q)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETVOLUMEQ()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET VOLUME (q)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 855
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 856
 testRunner.Given("the input is 3602123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 857
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 858
 testRunner.Then("the entity should be 360", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 859
     testRunner.And("the AI should be 3602", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 860
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 861
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 862
  testRunner.And("the data value should be NET VOLUME (q)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 863
  testRunner.And("the description should be Net volume, quarts (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 864
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 865
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (g)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (g)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseNETVOLUMEG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NET VOLUME (g)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 868
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 869
 testRunner.Given("the input is 3612123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 870
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 871
 testRunner.Then("the entity should be 361", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 872
     testRunner.And("the AI should be 3612", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 873
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 874
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 875
  testRunner.And("the data value should be NET VOLUME (g)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 876
  testRunner.And("the description should be Net volume, gallons U.S. (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 877
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 878
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (q), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (q), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEQLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (q), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 881
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 882
 testRunner.Given("the input is 3622123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 883
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 884
 testRunner.Then("the entity should be 362", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 885
     testRunner.And("the AI should be 3622", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 886
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 887
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 888
  testRunner.And("the data value should be VOLUME (q), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 889
  testRunner.And("the description should be Logistic volume, quarts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 890
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 891
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (g), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (g), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEGLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (g), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 894
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 895
 testRunner.Given("the input is 3632123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 896
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 897
 testRunner.Then("the entity should be 363", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 898
     testRunner.And("the AI should be 3632", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 899
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 900
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 901
  testRunner.And("the data value should be VOLUME (g), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 902
  testRunner.And("the description should be Logistic volume, gallons U.S.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 903
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 904
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (i³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (i³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (i³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 907
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 908
 testRunner.Given("the input is 3642123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 909
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 910
 testRunner.Then("the entity should be 364", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 911
     testRunner.And("the AI should be 3642", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 912
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 913
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 914
  testRunner.And("the data value should be VOLUME (i³)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 915
  testRunner.And("the description should be Net volume, cubic inches (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 916
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 917
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (f³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (f³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (f³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 920
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 921
 testRunner.Given("the input is 3652123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 922
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 923
 testRunner.Then("the entity should be 365", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 924
     testRunner.And("the AI should be 3652", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 925
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 926
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 927
  testRunner.And("the data value should be VOLUME (f³)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 928
  testRunner.And("the description should be Net volume, cubic feet (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 929
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 930
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (y³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (y³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (y³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 933
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 934
 testRunner.Given("the input is 3662123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 935
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 936
 testRunner.Then("the entity should be 366", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 937
     testRunner.And("the AI should be 3662", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 938
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 939
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 940
  testRunner.And("the data value should be VOLUME (y³)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 941
  testRunner.And("the description should be Net volume, cubic yards (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 942
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 943
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (i³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (i³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (i³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 946
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 947
 testRunner.Given("the input is 3672123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 948
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 949
 testRunner.Then("the entity should be 367", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 950
     testRunner.And("the AI should be 3672", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 951
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 952
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 953
  testRunner.And("the data value should be VOLUME (i³), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 954
  testRunner.And("the description should be Logistic volume, cubic inches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 955
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 956
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (f³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (f³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (f³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 959
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 960
 testRunner.Given("the input is 3682123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 961
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 962
 testRunner.Then("the entity should be 368", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 963
     testRunner.And("the AI should be 3682", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 964
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 965
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 966
  testRunner.And("the data value should be VOLUME (f³), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 967
  testRunner.And("the description should be Logistic volume, cubic feet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 968
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 969
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (y³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (y³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseVOLUMEYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VOLUME (y³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 972
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 973
 testRunner.Given("the input is 3692123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 974
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 975
 testRunner.Then("the entity should be 369", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 976
     testRunner.And("the AI should be 3692", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 977
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 978
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 979
  testRunner.And("the data value should be VOLUME (y³), log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 980
  testRunner.And("the description should be Logistic volume, cubic yards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 981
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 982
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNT")]
        [Xunit.TraitAttribute("Category", "N2+N..8")]
        public void ParseCOUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N..8"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 985
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 986
 testRunner.Given("the input is 3712345678", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 987
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 988
 testRunner.Then("the entity should be 37", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 989
     testRunner.And("the AI should be 37", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 990
  testRunner.And("the value should be 12345678", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 991
  testRunner.And("the data value should be COUNT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 992
  testRunner.And("the description should be Count of trade items or trade item pieces contained in " +
                        "a logistic unit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 993
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 994
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AMOUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AMOUNT")]
        [Xunit.TraitAttribute("Category", "N4+N..15")]
        public void ParseAMOUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AMOUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 997
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 998
 testRunner.Given("the input is 3902123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 999
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1000
 testRunner.Then("the entity should be 390", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1001
     testRunner.And("the AI should be 3902", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1002
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1003
  testRunner.And("the value should be 123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1004
  testRunner.And("the data value should be AMOUNT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1005
  testRunner.And("the description should be Amount payable or coupon value - Single monetary area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1006
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1007
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AMOUNT (ISO)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AMOUNT (ISO)")]
        [Xunit.TraitAttribute("Category", "N4+N3+N..15")]
        public void ParseAMOUNTISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AMOUNT (ISO)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1010
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1011
 testRunner.Given("the input is 3912826123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1012
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1013
 testRunner.Then("the entity should be 391", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1014
     testRunner.And("the AI should be 3912", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1015
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1016
  testRunner.And("the value should be 826123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1017
  testRunner.And("the data value should be AMOUNT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1018
  testRunner.And("the description should be Amount payable and ISO currency code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1019
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1020
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE")]
        [Xunit.TraitAttribute("Category", "N4+N..15")]
        public void ParsePRICE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRICE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1023
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1024
 testRunner.Given("the input is 3922123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1025
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1026
 testRunner.Then("the entity should be 392", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1027
     testRunner.And("the AI should be 3922", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1028
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1029
  testRunner.And("the value should be 123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1030
  testRunner.And("the data value should be PRICE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1031
  testRunner.And("the description should be Amount payable for a variable measure trade item – Sing" +
                        "le monetary area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1032
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1033
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE (ISO)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE (ISO)")]
        [Xunit.TraitAttribute("Category", "N4+N3+N..15")]
        public void ParsePRICEISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRICE (ISO)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1036
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1037
 testRunner.Given("the input is 3932826123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1038
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1039
 testRunner.Then("the entity should be 393", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1040
     testRunner.And("the AI should be 3932", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1041
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1042
  testRunner.And("the value should be 826123456789012345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1043
  testRunner.And("the data value should be PRICE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1044
  testRunner.And("the description should be Amount payable for a variable measure trade item and IS" +
                        "O currency code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1045
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1046
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRCNT OFF")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRCNT OFF")]
        [Xunit.TraitAttribute("Category", "N4+N4")]
        public void ParsePRCNTOFF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRCNT OFF", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1049
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1050
 testRunner.Given("the input is 39421234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1051
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1052
 testRunner.Then("the entity should be 394", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1053
     testRunner.And("the AI should be 3942", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1054
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1055
  testRunner.And("the value should be 1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1056
  testRunner.And("the data value should be PRCNT OFF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1057
  testRunner.And("the description should be Percentage discount of a coupon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1058
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1059
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE/UoM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE/UoM")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParsePRICEUoM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRICE/UoM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1062
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1063
 testRunner.Given("the input is 3952123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1064
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1065
 testRunner.Then("the entity should be 395", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1066
     testRunner.And("the AI should be 3952", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1067
  testRunner.And("the inverse exponent should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1068
  testRunner.And("the value should be 123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1069
  testRunner.And("the data value should be PRICE/UoM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1070
  testRunner.And("the description should be Amount payable per unit of measure single monetary area" +
                        " (variable measure trade item)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1071
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1072
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORDER NUMBER")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORDER NUMBER")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseORDERNUMBER()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ORDER NUMBER", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1075
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1076
 testRunner.Given("the input is 4001234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1077
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1078
 testRunner.Then("the entity should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1079
     testRunner.And("the AI should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1080
  testRunner.And("the value should be 1234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1081
  testRunner.And("the data value should be ORDER NUMBER", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1082
  testRunner.And("the description should be Customer’s purchase order number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1083
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1084
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GINC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GINC")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseGINC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GINC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1087
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1088
 testRunner.Given("the input is 401506091751123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1089
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1090
 testRunner.Then("the entity should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1091
     testRunner.And("the AI should be 401", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1092
  testRunner.And("the value should be 506091751123456", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1093
  testRunner.And("the data value should be GINC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1094
  testRunner.And("the description should be Global Identification Number for Consignment (GINC)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1095
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1096
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSIN")]
        [Xunit.TraitAttribute("Category", "N3+N17")]
        public void ParseGSIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N17"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GSIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1099
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1100
 testRunner.Given("the input is 40250609175112345629", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1101
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1102
 testRunner.Then("the entity should be 402", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1103
     testRunner.And("the AI should be 402", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1104
  testRunner.And("the value should be 50609175112345629", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1105
  testRunner.And("the data value should be GSIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1106
  testRunner.And("the description should be Global Shipment Identification Number (GSIN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1107
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1108
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ROUTE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ROUTE")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public void ParseROUTE()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ROUTE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1112
 testRunner.Given("the input is 403Routing+Code+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1113
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1114
 testRunner.Then("the entity should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1115
     testRunner.And("the AI should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1116
  testRunner.And("the value should be Routing+Code+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1117
  testRunner.And("the data value should be ROUTE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1118
  testRunner.And("the description should be Routing code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1119
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1120
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParseSHIPTOLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1124
 testRunner.Given("the input is 4105060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1125
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1126
 testRunner.Then("the entity should be 410", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1127
     testRunner.And("the AI should be 410", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1128
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1129
  testRunner.And("the data value should be SHIP TO LOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1130
  testRunner.And("the description should be Ship to - Deliver to Global Location Number (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1131
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1132
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BILL TO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BILL TO")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParseBILLTO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse BILL TO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1136
 testRunner.Given("the input is 4115060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1137
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1138
 testRunner.Then("the entity should be 411", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1139
     testRunner.And("the AI should be 411", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1140
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1141
  testRunner.And("the data value should be BILL TO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1142
  testRunner.And("the description should be Bill to - Invoice to Global Location Number (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1143
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1144
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PURCHASE FROM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PURCHASE FROM")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParsePURCHASEFROM()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PURCHASE FROM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1148
 testRunner.Given("the input is 4125060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1149
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1150
 testRunner.Then("the entity should be 412", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1151
     testRunner.And("the AI should be 412", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1152
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1153
  testRunner.And("the data value should be PURCHASE FROM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1154
  testRunner.And("the description should be Purchased from Global Location Number (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1155
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1156
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP FOR LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP FOR LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParseSHIPFORLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP FOR LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1160
 testRunner.Given("the input is 4135060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1161
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1162
 testRunner.Then("the entity should be 413", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1163
     testRunner.And("the AI should be 413", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1164
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1165
  testRunner.And("the data value should be SHIP FOR LOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1166
  testRunner.And("the description should be Ship for - Deliver for - Forward to Global Location Num" +
                        "ber (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1167
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1168
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LOC No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LOC No.")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParseLOCNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse LOC No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1172
 testRunner.Given("the input is 4145060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1173
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1174
 testRunner.Then("the entity should be 414", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1175
     testRunner.And("the AI should be 414", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1176
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1177
  testRunner.And("the data value should be LOC No.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1178
  testRunner.And("the description should be Identification of a physical location - Global Location" +
                        " Number (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1179
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1180
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PAY TO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PAY TO")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParsePAYTO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PAY TO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1184
 testRunner.Given("the input is 4155060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1185
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1186
 testRunner.Then("the entity should be 415", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1187
     testRunner.And("the AI should be 415", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1188
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1189
  testRunner.And("the data value should be PAY TO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1190
  testRunner.And("the description should be Global Location Number (GLN) of the invoicing party", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1191
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1192
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD/SERV LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD/SERV LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParsePRODSERVLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROD/SERV LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1196
 testRunner.Given("the input is 4165060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1197
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1198
 testRunner.Then("the entity should be 416", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1199
     testRunner.And("the AI should be 416", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1200
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1201
  testRunner.And("the data value should be PROD/SERV LOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1202
  testRunner.And("the description should be Global Location Number (GLN) of the production or servi" +
                        "ce location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1203
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1204
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PARTY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PARTY")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public void ParsePARTY()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PARTY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1208
 testRunner.Given("the input is 4175060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1209
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1210
 testRunner.Then("the entity should be 417", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1211
     testRunner.And("the AI should be 417", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1212
  testRunner.And("the value should be 5060917510004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1213
  testRunner.And("the data value should be PARTY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1214
  testRunner.And("the description should be Party Global Location Number (GLN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1215
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1216
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO POST")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO POST")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseSHIPTOPOST()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO POST", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1220
 testRunner.Given("the input is 420SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1221
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1222
 testRunner.Then("the entity should be 420", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1223
     testRunner.And("the AI should be 420", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1224
  testRunner.And("the value should be SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1225
  testRunner.And("the data value should be SHIP TO POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1226
  testRunner.And("the description should be Ship-to / Deliver-to postal code within a single postal" +
                        " authority", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1227
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1228
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO POST ISO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO POST ISO")]
        [Xunit.TraitAttribute("Category", "N3+N3+X..9")]
        public void ParseSHIPTOPOSTISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+X..9"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO POST ISO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1232
 testRunner.Given("the input is 421826SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1233
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1234
 testRunner.Then("the entity should be 421", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1235
     testRunner.And("the AI should be 421", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1236
  testRunner.And("the value should be 826SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1237
  testRunner.And("the data value should be SHIP TO POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1238
  testRunner.And("the description should be Ship-to / Deliver-to postal code with three-digit ISO c" +
                        "ountry code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1239
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1240
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORIGIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORIGIN")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public void ParseORIGIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ORIGIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1244
 testRunner.Given("the input is 422826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1245
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1246
 testRunner.Then("the entity should be 422", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1247
     testRunner.And("the AI should be 422", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1248
  testRunner.And("the value should be 826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1249
  testRunner.And("the data value should be ORIGIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1250
  testRunner.And("the description should be Country of origin of a trade item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1251
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1252
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - INITIAL PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - INITIAL PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3+N..12")]
        public void ParseCOUNTRY_INITIALPROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUNTRY - INITIAL PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1256
 testRunner.Given("the input is 423826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1257
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1258
 testRunner.Then("the entity should be 423", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1259
     testRunner.And("the AI should be 423", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1260
  testRunner.And("the value should be 826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1261
  testRunner.And("the data value should be COUNTRY - INITIAL PROCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1262
  testRunner.And("the description should be Country of initial processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1263
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1264
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public void ParseCOUNTRY_PROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUNTRY - PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1267
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1268
 testRunner.Given("the input is 424826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1269
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1270
 testRunner.Then("the entity should be 424", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1271
     testRunner.And("the AI should be 424", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1272
  testRunner.And("the value should be 826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1273
  testRunner.And("the data value should be COUNTRY - PROCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1274
  testRunner.And("the description should be Country of processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1275
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1276
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - DISASSEMBLY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - DISASSEMBLY")]
        [Xunit.TraitAttribute("Category", "N3+N3+N..12")]
        public void ParseCOUNTRY_DISASSEMBLY()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUNTRY - DISASSEMBLY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1280
 testRunner.Given("the input is 425826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1281
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1282
 testRunner.Then("the entity should be 425", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1283
     testRunner.And("the AI should be 425", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1284
  testRunner.And("the value should be 826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1285
  testRunner.And("the data value should be COUNTRY - DISASSEMBLY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1286
  testRunner.And("the description should be Country of disassembly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1287
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1288
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY – FULL PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY – FULL PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public void ParseCOUNTRYFULLPROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUNTRY – FULL PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1291
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1292
 testRunner.Given("the input is 426826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1293
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1294
 testRunner.Then("the entity should be 426", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1295
     testRunner.And("the AI should be 426", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1296
  testRunner.And("the value should be 826", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1297
  testRunner.And("the data value should be COUNTRY – FULL PROCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1298
  testRunner.And("the description should be Country covering full process chain", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1299
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1300
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORIGIN SUBDIVISION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORIGIN SUBDIVISION")]
        [Xunit.TraitAttribute("Category", "N3+X..3")]
        public void ParseORIGINSUBDIVISION()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ORIGIN SUBDIVISION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1303
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1304
 testRunner.Given("the input is 427ENG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1305
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1306
 testRunner.Then("the entity should be 427", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1307
     testRunner.And("the AI should be 427", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1308
  testRunner.And("the value should be ENG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1309
  testRunner.And("the data value should be ORIGIN SUBDIVISION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1310
  testRunner.And("the description should be Country subdivision of origin code for a trade item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1311
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1312
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO COMP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO COMP")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public void ParseSHIPTOCOMP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO COMP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1316
 testRunner.Given("the input is 4300Acme+Corp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1317
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1318
 testRunner.Then("the entity should be 4300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1319
     testRunner.And("the AI should be 4300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1320
  testRunner.And("the value should be Acme+Corp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1321
  testRunner.And("the data value should be SHIP TO COMP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1322
  testRunner.And("the description should be Ship-to / Deliver-to Company name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1323
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1324
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public void ParseSHIPTONAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1327
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1328
 testRunner.Given("the input is 4301John+Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1329
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1330
 testRunner.Then("the entity should be 4301", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1331
     testRunner.And("the AI should be 4301", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1332
  testRunner.And("the value should be John+Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1333
  testRunner.And("the data value should be SHIP TO NAME", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1334
  testRunner.And("the description should be Ship-to / Deliver-to contact name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1335
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1336
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO ADD1")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO ADD1")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseSHIPTOADD1()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO ADD1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1340
 testRunner.Given("the input is 4302100+Acadia+Avenue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1341
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1342
 testRunner.Then("the entity should be 4302", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1343
     testRunner.And("the AI should be 4302", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1344
  testRunner.And("the value should be 100+Acadia+Avenue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1345
  testRunner.And("the data value should be SHIP TO ADD1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1346
  testRunner.And("the description should be Ship-to / Deliver-to address line 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1347
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1348
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO ADD2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO ADD2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseSHIPTOADD2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO ADD2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1351
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1352
 testRunner.Given("the input is 4303Noborough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1353
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1354
 testRunner.Then("the entity should be 4303", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1355
     testRunner.And("the AI should be 4303", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1356
  testRunner.And("the value should be Noborough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1357
  testRunner.And("the data value should be SHIP TO ADD2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1358
  testRunner.And("the description should be Ship-to / Deliver-to address line 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1359
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1360
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO SUB")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO SUB")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseSHIPTOSUB()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO SUB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1363
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1364
 testRunner.Given("the input is 4304Lower+District", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1365
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1366
 testRunner.Then("the entity should be 4304", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1367
     testRunner.And("the AI should be 4304", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1368
  testRunner.And("the value should be Lower+District", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1369
  testRunner.And("the data value should be SHIP TO SUB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1370
  testRunner.And("the description should be Ship-to / Deliver-to suburb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1371
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1372
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO LOCALITY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO LOCALITY")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseSHIPTOLOCALITY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO LOCALITY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1375
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1376
 testRunner.Given("the input is 4305Anytown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1377
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1378
 testRunner.Then("the entity should be 4305", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1379
     testRunner.And("the AI should be 4305", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1380
  testRunner.And("the value should be Anytown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1381
  testRunner.And("the data value should be SHIP TO LOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1382
  testRunner.And("the description should be Ship-to / Deliver-to locality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1383
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1384
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO REG")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO REG")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseSHIPTOREG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO REG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1387
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1388
 testRunner.Given("the input is 4306United+Kingdom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1389
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1390
 testRunner.Then("the entity should be 4306", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1391
     testRunner.And("the AI should be 4306", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1392
  testRunner.And("the value should be United+Kingdom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1393
  testRunner.And("the data value should be SHIP TO REG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1394
  testRunner.And("the description should be Ship-to / Deliver-to region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1395
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1396
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO COUNTRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO COUNTRY")]
        [Xunit.TraitAttribute("Category", "N4+X2")]
        public void ParseSHIPTOCOUNTRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO COUNTRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1399
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1400
 testRunner.Given("the input is 4307GB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1401
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1402
 testRunner.Then("the entity should be 4307", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1403
     testRunner.And("the AI should be 4307", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1404
  testRunner.And("the value should be GB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1405
  testRunner.And("the data value should be SHIP TO COUNTRY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1406
  testRunner.And("the description should be Ship-to / Deliver-to country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1407
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1408
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO PHONE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO PHONE")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public void ParseSHIPTOPHONE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO PHONE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1411
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1412
 testRunner.Given("the input is 4308+32-2-788-78-00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1413
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1414
 testRunner.Then("the entity should be 4308", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1415
     testRunner.And("the AI should be 4308", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1416
  testRunner.And("the value should be +32-2-788-78-00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1417
  testRunner.And("the data value should be SHIP TO PHONE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1418
  testRunner.And("the description should be Ship-to / Deliver-to telephone number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1419
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1420
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO GEO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO GEO")]
        [Xunit.TraitAttribute("Category", "N4+N20")]
        public void ParseSHIPTOGEO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SHIP TO GEO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1423
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1424
 testRunner.Given("the input is 430902790858483015297971", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1425
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1426
 testRunner.Then("the entity should be 4309", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1427
     testRunner.And("the AI should be 4309", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1428
  testRunner.And("the value should be 02790858483015297971", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1429
  testRunner.And("the data value should be SHIP TO GEO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1430
  testRunner.And("the description should be Ship-to / Deliver-to GEO location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1431
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1432
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO COMP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO COMP")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public void ParseRTNTOCOMP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO COMP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1435
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1436
 testRunner.Given("the input is 4310Acme+Corp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1437
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1438
 testRunner.Then("the entity should be 4310", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1439
     testRunner.And("the AI should be 4310", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1440
  testRunner.And("the value should be Acme+Corp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1441
  testRunner.And("the data value should be RTN TO COMP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1442
  testRunner.And("the description should be Return-to company name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1443
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1444
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public void ParseRTNTONAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1447
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1448
 testRunner.Given("the input is 4311John+Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1449
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1450
 testRunner.Then("the entity should be 4311", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1451
     testRunner.And("the AI should be 4311", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1452
  testRunner.And("the value should be John+Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1453
  testRunner.And("the data value should be RTN TO NAME", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1454
  testRunner.And("the description should be Return-to contact name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1455
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1456
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO ADD1")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO ADD1")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseRTNTOADD1()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO ADD1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1459
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1460
 testRunner.Given("the input is 4312100+Acadia+Avenue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1461
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1462
 testRunner.Then("the entity should be 4312", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1463
     testRunner.And("the AI should be 4312", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1464
  testRunner.And("the value should be 100+Acadia+Avenue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1465
  testRunner.And("the data value should be RTN TO ADD1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1466
  testRunner.And("the description should be Return-to address line 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1467
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1468
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO ADD2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO ADD2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseRTNTOADD2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO ADD2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1471
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1472
 testRunner.Given("the input is 4313Noborough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1473
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1474
 testRunner.Then("the entity should be 4313", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1475
     testRunner.And("the AI should be 4313", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1476
  testRunner.And("the value should be Noborough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1477
  testRunner.And("the data value should be RTN TO ADD2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1478
  testRunner.And("the description should be Return-to address line 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1479
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1480
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO SUB")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO SUB")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseRTNTOSUB()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO SUB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1483
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1484
 testRunner.Given("the input is 4314Lower+District", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1485
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1486
 testRunner.Then("the entity should be 4314", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1487
     testRunner.And("the AI should be 4314", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1488
  testRunner.And("the value should be Lower+District", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1489
  testRunner.And("the data value should be RTN TO SUB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1490
  testRunner.And("the description should be Return-to suburb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1491
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1492
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO LOC")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseRTNTOLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1495
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1496
 testRunner.Given("the input is 4315Anytown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1497
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1498
 testRunner.Then("the entity should be 4315", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1499
     testRunner.And("the AI should be 4315", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1500
  testRunner.And("the value should be Anytown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1501
  testRunner.And("the data value should be RTN TO LOC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1502
  testRunner.And("the description should be Return-to locality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1503
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1504
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO REG")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO REG")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseRTNTOREG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO REG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1507
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1508
 testRunner.Given("the input is 4316United+Kingdom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1509
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1510
 testRunner.Then("the entity should be 4316", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1511
     testRunner.And("the AI should be 4316", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1512
  testRunner.And("the value should be United+Kingdom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1513
  testRunner.And("the data value should be RTN TO REG", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1514
  testRunner.And("the description should be Return-to region", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1515
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1516
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO COUNTRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO COUNTRY")]
        [Xunit.TraitAttribute("Category", "N4+X2")]
        public void ParseRTNTOCOUNTRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO COUNTRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1519
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1520
 testRunner.Given("the input is 4317GB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1521
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1522
 testRunner.Then("the entity should be 4317", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1523
     testRunner.And("the AI should be 4317", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1524
  testRunner.And("the value should be GB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1525
  testRunner.And("the data value should be RTN TO COUNTRY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1526
  testRunner.And("the description should be Return-to country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1527
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1528
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO POST")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO POST")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseRTNTOPOST()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO POST", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1531
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1532
 testRunner.Given("the input is 4318SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1533
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1534
 testRunner.Then("the entity should be 4318", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1535
     testRunner.And("the AI should be 4318", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1536
  testRunner.And("the value should be SE220PF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1537
  testRunner.And("the data value should be RTN TO POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1538
  testRunner.And("the description should be Return-to postal code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1539
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1540
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO PHONE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO PHONE")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public void ParseRTNTOPHONE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse RTN TO PHONE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1543
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1544
 testRunner.Given("the input is 4319+32-2-788-78-00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1545
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1546
 testRunner.Then("the entity should be 4319", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1547
     testRunner.And("the AI should be 4319", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1548
  testRunner.And("the value should be +32-2-788-78-00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1549
  testRunner.And("the data value should be RTN TO PHONE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1550
  testRunner.And("the description should be Return-to telephone number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1551
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1552
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SRV DESCRIPTION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SRV DESCRIPTION")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public void ParseSRVDESCRIPTION()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SRV DESCRIPTION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1555
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1556
 testRunner.Given("the input is 4320Service+code+description+12345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1557
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1558
 testRunner.Then("the entity should be 4320", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1559
     testRunner.And("the AI should be 4320", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1560
  testRunner.And("the value should be Service+code+description+12345", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1561
  testRunner.And("the data value should be SRV DESCRIPTION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1562
  testRunner.And("the description should be Service code description", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1563
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1564
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DANGEROUS GOODS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DANGEROUS GOODS")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public void ParseDANGEROUSGOODS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse DANGEROUS GOODS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1567
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1568
 testRunner.Given("the input is 43211", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1569
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1570
 testRunner.Then("the entity should be 4321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1571
     testRunner.And("the AI should be 4321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1572
  testRunner.And("the value should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1573
  testRunner.And("the data value should be DANGEROUS GOODS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1574
  testRunner.And("the description should be Dangerous goods flag", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1575
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1576
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AUTH LEAVE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AUTH LEAVE")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public void ParseAUTHLEAVE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AUTH LEAVE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1579
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1580
 testRunner.Given("the input is 43221", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1581
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1582
 testRunner.Then("the entity should be 4322", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1583
     testRunner.And("the AI should be 4322", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1584
  testRunner.And("the value should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1585
  testRunner.And("the data value should be AUTH LEAVE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1586
  testRunner.And("the description should be Authority to leave flag", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1587
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1588
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SIG REQUIRED")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SIG REQUIRED")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public void ParseSIGREQUIRED()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SIG REQUIRED", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1592
 testRunner.Given("the input is 43231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1593
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1594
 testRunner.Then("the entity should be 4323", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1595
     testRunner.And("the AI should be 4323", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1596
  testRunner.And("the value should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1597
  testRunner.And("the data value should be SIG REQUIRED", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1598
  testRunner.And("the description should be Signature required flag", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1599
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1600
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NBEF DEL DT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NBEF DEL DT")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public void ParseNBEFDELDT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NBEF DEL DT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1603
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1604
 testRunner.Given("the input is 43242312310900", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1605
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1606
 testRunner.Then("the entity should be 4324", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1607
     testRunner.And("the AI should be 4324", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1608
  testRunner.And("the value should be 2312310900", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1609
  testRunner.And("the data value should be NBEF DEL DT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1610
  testRunner.And("the description should be Not before delivery date/time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1611
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1612
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NAFT DEL DT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NAFT DEL DT")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public void ParseNAFTDELDT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NAFT DEL DT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1615
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1616
 testRunner.Given("the input is 43252312311700", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1617
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1618
 testRunner.Then("the entity should be 4325", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1619
     testRunner.And("the AI should be 4325", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1620
  testRunner.And("the value should be 2312311700", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1621
  testRunner.And("the data value should be NAFT DEL DT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1622
  testRunner.And("the description should be Not after delivery date/time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1623
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1624
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REL DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REL DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseRELDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse REL DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1627
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1628
 testRunner.Given("the input is 4326231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1629
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1630
 testRunner.Then("the entity should be 4326", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1631
     testRunner.And("the AI should be 4326", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1632
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1633
  testRunner.And("the data value should be REL DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1634
  testRunner.And("the description should be Release date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1635
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1636
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NSN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NSN")]
        [Xunit.TraitAttribute("Category", "N4+N13")]
        public void ParseNSN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NSN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1639
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1640
 testRunner.Given("the input is 70015310997032519", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1641
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1642
 testRunner.Then("the entity should be 7001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1643
     testRunner.And("the AI should be 7001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1644
  testRunner.And("the value should be 5310997032519", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1645
  testRunner.And("the data value should be NSN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1646
  testRunner.And("the description should be NATO Stock Number (NSN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1647
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1648
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MEAT CUT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MEAT CUT")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public void ParseMEATCUT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse MEAT CUT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1651
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1652
 testRunner.Given("the input is 700244932211340000145100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1653
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1654
 testRunner.Then("the entity should be 7002", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1655
     testRunner.And("the AI should be 7002", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1656
  testRunner.And("the value should be 44932211340000145100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1657
  testRunner.And("the data value should be MEAT CUT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1658
  testRunner.And("the description should be UN/ECE meat carcasses and cuts classification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1659
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1660
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse EXPIRY TIME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse EXPIRY TIME")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public void ParseEXPIRYTIME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse EXPIRY TIME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1663
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1664
 testRunner.Given("the input is 70032312312359", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1665
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1666
 testRunner.Then("the entity should be 7003", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1667
     testRunner.And("the AI should be 7003", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1668
  testRunner.And("the value should be 2312312359", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1669
  testRunner.And("the data value should be EXPIRY TIME", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1670
  testRunner.And("the description should be Expiration date and time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1671
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1672
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ACTIVE POTENCY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ACTIVE POTENCY")]
        [Xunit.TraitAttribute("Category", "N4+N..4")]
        public void ParseACTIVEPOTENCY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ACTIVE POTENCY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1675
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1676
 testRunner.Given("the input is 70043001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1677
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1678
 testRunner.Then("the entity should be 7004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1679
     testRunner.And("the AI should be 7004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1680
  testRunner.And("the value should be 3001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1681
  testRunner.And("the data value should be ACTIVE POTENCY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1682
  testRunner.And("the description should be Active potency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1683
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1684
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CATCH AREA")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CATCH AREA")]
        [Xunit.TraitAttribute("Category", "N4+X..12")]
        public void ParseCATCHAREA()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CATCH AREA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1687
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1688
 testRunner.Given("the input is 700527.6.b.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1689
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1690
 testRunner.Then("the entity should be 7005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1691
     testRunner.And("the AI should be 7005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1692
  testRunner.And("the value should be 27.6.b.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1693
  testRunner.And("the data value should be CATCH AREA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1694
  testRunner.And("the description should be Catch area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1695
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1696
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FIRST FREEZE DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FIRST FREEZE DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParseFIRSTFREEZEDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse FIRST FREEZE DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1699
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1700
 testRunner.Given("the input is 7006231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1701
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1702
 testRunner.Then("the entity should be 7006", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1703
     testRunner.And("the AI should be 7006", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1704
  testRunner.And("the value should be 231231", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1705
  testRunner.And("the data value should be FIRST FREEZE DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1706
  testRunner.And("the description should be First freeze date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1707
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1708
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HARVEST DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HARVEST DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6[+N6]")]
        public void ParseHARVESTDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6[+N6]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse HARVEST DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1711
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1712
 testRunner.Given("the input is 7007230801230831", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1713
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1714
 testRunner.Then("the entity should be 7007", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1715
     testRunner.And("the AI should be 7007", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1716
  testRunner.And("the value should be 230801230831", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1717
  testRunner.And("the data value should be HARVEST DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1718
  testRunner.And("the description should be Harvest date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1719
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1720
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AQUATIC SPECIES")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AQUATIC SPECIES")]
        [Xunit.TraitAttribute("Category", "N4+X..3")]
        public void ParseAQUATICSPECIES()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse AQUATIC SPECIES", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1723
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1724
 testRunner.Given("the input is 7008BWQ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1725
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1726
 testRunner.Then("the entity should be 7008", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1727
     testRunner.And("the AI should be 7008", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1728
  testRunner.And("the value should be BWQ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1729
  testRunner.And("the data value should be AQUATIC SPECIES", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1730
  testRunner.And("the description should be Species for fishery purposes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1731
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1732
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FISHING GEAR TYPE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FISHING GEAR TYPE")]
        [Xunit.TraitAttribute("Category", "N4+X..10")]
        public void ParseFISHINGGEARTYPE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse FISHING GEAR TYPE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1735
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1736
 testRunner.Given("the input is 700901.1.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1737
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1738
 testRunner.Then("the entity should be 7009", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1739
     testRunner.And("the AI should be 7009", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1740
  testRunner.And("the value should be 01.1.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1741
  testRunner.And("the data value should be FISHING GEAR TYPE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1742
  testRunner.And("the description should be Fishing gear type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1743
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1744
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD METHOD")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD METHOD")]
        [Xunit.TraitAttribute("Category", "N4+X..2")]
        public void ParsePRODMETHOD()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROD METHOD", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1747
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1748
 testRunner.Given("the input is 701001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1749
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1750
 testRunner.Then("the entity should be 7010", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1751
     testRunner.And("the AI should be 7010", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1752
  testRunner.And("the value should be 01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1753
  testRunner.And("the data value should be PROD METHOD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1754
  testRunner.And("the description should be Production method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1755
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1756
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse TEST BY DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse TEST BY DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6[+N4]")]
        public void ParseTESTBYDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6[+N4]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse TEST BY DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1759
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1760
 testRunner.Given("the input is 70112312311200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1761
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1762
 testRunner.Then("the entity should be 7011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1763
     testRunner.And("the AI should be 7011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1764
  testRunner.And("the value should be 2312311200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1765
  testRunner.And("the data value should be TEST BY DATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1766
  testRunner.And("the description should be Test by date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1767
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1768
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REFURB LOT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REFURB LOT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseREFURBLOT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse REFURB LOT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1771
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1772
 testRunner.Given("the input is 7020ABC123DE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1773
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1774
 testRunner.Then("the entity should be 7020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1775
     testRunner.And("the AI should be 7020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1776
  testRunner.And("the value should be ABC123DE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1777
  testRunner.And("the data value should be REFURB LOT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1778
  testRunner.And("the description should be Refurbishment lot ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1779
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1780
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FUNC STAT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FUNC STAT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseFUNCSTAT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse FUNC STAT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1783
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1784
 testRunner.Given("the input is 7021Functional+status+01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1785
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1786
 testRunner.Then("the entity should be 7021", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1787
     testRunner.And("the AI should be 7021", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1788
  testRunner.And("the value should be Functional+status+01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1789
  testRunner.And("the data value should be FUNC STAT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1790
  testRunner.And("the description should be Functional status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1791
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1792
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REV STAT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REV STAT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseREVSTAT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse REV STAT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1795
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1796
 testRunner.Given("the input is 7022Revision+status+01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1797
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1798
 testRunner.Then("the entity should be 7022", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1799
     testRunner.And("the AI should be 7022", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1800
  testRunner.And("the value should be Revision+status+01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1801
  testRunner.And("the data value should be REV STAT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1802
  testRunner.And("the description should be Revision status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1803
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1804
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GIAI – ASSEMBLY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GIAI – ASSEMBLY")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public void ParseGIAIASSEMBLY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GIAI – ASSEMBLY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1807
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1808
 testRunner.Given("the input is 7023506091751ASSET+0001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1809
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1810
 testRunner.Then("the entity should be 7023", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1811
     testRunner.And("the AI should be 7023", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1812
  testRunner.And("the value should be 506091751ASSET+0001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1813
  testRunner.And("the data value should be GIAI – ASSEMBLY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1814
  testRunner.And("the description should be Global Individual Asset Identifier of an assembly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1815
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1816
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROCESSOR # s")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROCESSOR # s")]
        [Xunit.TraitAttribute("Category", "N4+N3+X..27")]
        public void ParsePROCESSORS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+X..27"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROCESSOR # s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1819
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1820
 testRunner.Given("the input is 7030826FSSC+22000+-+00020281", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1821
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1822
 testRunner.Then("the entity should be 703", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1823
     testRunner.And("the AI should be 7030", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1824
  testRunner.And("the sequence number should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1825
  testRunner.And("the value should be 826FSSC+22000+-+00020281", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1826
  testRunner.And("the data value should be PROCESSOR # s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1827
  testRunner.And("the description should be Number of processor with three-digit ISO country code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1828
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1829
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse UIC+EXT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse UIC+EXT")]
        [Xunit.TraitAttribute("Category", "N4+N1+X3")]
        public void ParseUICEXT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1+X3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse UIC+EXT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1832
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1833
 testRunner.Given("the input is 70403PA_", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1834
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1835
 testRunner.Then("the entity should be 7040", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1836
     testRunner.And("the AI should be 7040", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1837
  testRunner.And("the value should be 3PA_", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1838
  testRunner.And("the data value should be UIC+EXT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1839
  testRunner.And("the description should be GS1 UIC with Extension 1 and Importer index", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1840
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1841
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN PZN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN PZN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNPZN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN PZN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1844
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1845
 testRunner.Given("the input is 7103675419", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1846
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1847
 testRunner.Then("the entity should be 710", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1848
     testRunner.And("the AI should be 710", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1849
  testRunner.And("the value should be 3675419", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1850
  testRunner.And("the data value should be NHRN PZN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1851
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Germa" +
                        "ny PZN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1852
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1853
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN CIP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN CIP")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNCIP()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN CIP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1856
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1857
 testRunner.Given("the input is 7113400935974419", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1858
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1859
 testRunner.Then("the entity should be 711", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1860
     testRunner.And("the AI should be 711", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1861
  testRunner.And("the value should be 3400935974419", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1862
  testRunner.And("the data value should be NHRN CIP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1863
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Franc" +
                        "e CIP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1864
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1865
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN CN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN CN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN CN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1868
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1869
 testRunner.Given("the input is 712384756.8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1870
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1871
 testRunner.Then("the entity should be 712", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1872
     testRunner.And("the AI should be 712", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1873
  testRunner.And("the value should be 384756.8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1874
  testRunner.And("the data value should be NHRN CN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1875
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Spain" +
                        " CN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1876
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1877
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN DRN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN DRN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNDRN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN DRN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1880
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1881
 testRunner.Given("the input is 71340056320000011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1882
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1883
 testRunner.Then("the entity should be 713", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1884
     testRunner.And("the AI should be 713", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1885
  testRunner.And("the value should be 40056320000011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1886
  testRunner.And("the data value should be NHRN DRN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1887
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Brasi" +
                        "l DRN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1888
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1889
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN AIM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN AIM")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNAIM()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN AIM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1892
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1893
 testRunner.Given("the input is 714142199", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1894
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1895
 testRunner.Then("the entity should be 714", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1896
     testRunner.And("the AI should be 714", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1897
  testRunner.And("the value should be 142199", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1898
  testRunner.And("the data value should be NHRN AIM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1899
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Portu" +
                        "gal AIM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1900
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1901
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN NDC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN NDC")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public void ParseNHRNNDC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse NHRN NDC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1904
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1905
 testRunner.Given("the input is 7150777310502", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1906
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1907
 testRunner.Then("the entity should be 715", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1908
     testRunner.And("the AI should be 715", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1909
  testRunner.And("the value should be 0777310502", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1910
  testRunner.And("the data value should be NHRN NDC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1911
  testRunner.And("the description should be National Healthcare Reimbursement Number (NHRN) – Unite" +
                        "d States of America NDC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1912
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1913
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CERT # s")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CERT # s")]
        [Xunit.TraitAttribute("Category", "N4+X2+X..28")]
        public void ParseCERTS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2+X..28"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CERT # s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1916
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1917
 testRunner.Given("the input is 7230EMBABT-MED00108", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1918
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1919
 testRunner.Then("the entity should be 723", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1920
     testRunner.And("the AI should be 7230", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1921
  testRunner.And("the sequence number should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1922
  testRunner.And("the value should be EMBABT-MED00108", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1923
  testRunner.And("the data value should be CERT # s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1924
  testRunner.And("the description should be Certification reference", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1925
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1926
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROTOCOL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROTOCOL")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParsePROTOCOL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROTOCOL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1929
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1930
 testRunner.Given("the input is 7240CACZ885N2301E2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1931
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1932
 testRunner.Then("the entity should be 7240", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1933
     testRunner.And("the AI should be 7240", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1934
  testRunner.And("the value should be CACZ885N2301E2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1935
  testRunner.And("the data value should be PROTOCOL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1936
  testRunner.And("the description should be Protocol ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1937
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1938
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DIMENSIONS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DIMENSIONS")]
        [Xunit.TraitAttribute("Category", "N4+N14")]
        public void ParseDIMENSIONS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse DIMENSIONS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1941
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1942
 testRunner.Given("the input is 800115000003056000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1943
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1944
 testRunner.Then("the entity should be 8001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1945
     testRunner.And("the AI should be 8001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1946
  testRunner.And("the value should be 15000003056000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1947
  testRunner.And("the data value should be DIMENSIONS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1948
  testRunner.And("the description should be Roll products - width, length, core diameter, direction" +
                        ", splices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1949
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1950
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CMT No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CMT No.")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseCMTNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CMT No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1953
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1954
 testRunner.Given("the input is 8002RF1DB6K177Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1955
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1956
 testRunner.Then("the entity should be 8002", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1957
     testRunner.And("the AI should be 8002", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1958
  testRunner.And("the value should be RF1DB6K177Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1959
  testRunner.And("the data value should be CMT No.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1960
  testRunner.And("the description should be Cellular mobile telephone identifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1961
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1962
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GRAI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GRAI")]
        [Xunit.TraitAttribute("Category", "N4+N14[+X..16]")]
        public void ParseGRAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14[+X..16]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GRAI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1965
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1966
 testRunner.Given("the input is 80030506091751000434B1UL09036", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1967
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1968
 testRunner.Then("the entity should be 8003", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1969
     testRunner.And("the AI should be 8003", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1970
  testRunner.And("the value should be 0506091751000434B1UL09036", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1971
  testRunner.And("the data value should be GRAI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1972
  testRunner.And("the description should be Global Returnable Asset Identifier (GRAI)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1973
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1974
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GIAI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GIAI")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public void ParseGIAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GIAI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1977
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1978
 testRunner.Given("the input is 80045060917ASSET+0001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1979
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1980
 testRunner.Then("the entity should be 8004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1981
     testRunner.And("the AI should be 8004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1982
  testRunner.And("the value should be 5060917ASSET+0001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1983
  testRunner.And("the data value should be GIAI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1984
  testRunner.And("the description should be Global Individual Asset Identifier (GIAI)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1985
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1986
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE PER UNIT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE PER UNIT")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public void ParsePRICEPERUNIT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRICE PER UNIT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1989
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1990
 testRunner.Given("the input is 8005000150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1991
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1992
 testRunner.Then("the entity should be 8005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1993
     testRunner.And("the AI should be 8005", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1994
  testRunner.And("the value should be 000150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1995
  testRunner.And("the data value should be PRICE PER UNIT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1996
  testRunner.And("the description should be Price per unit of measure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1997
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1998
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ITIP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ITIP")]
        [Xunit.TraitAttribute("Category", "N4+N14+N2+N2")]
        public void ParseITIP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14+N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ITIP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2001
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2002
 testRunner.Given("the input is 8006050609175100040102", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2003
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2004
 testRunner.Then("the entity should be 8006", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2005
     testRunner.And("the AI should be 8006", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2006
  testRunner.And("the value should be 050609175100040102", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2007
  testRunner.And("the data value should be ITIP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2008
  testRunner.And("the description should be Identification of an individual trade item (ITIP) piece" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2009
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2010
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse IBAN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse IBAN")]
        [Xunit.TraitAttribute("Category", "N4+X..34")]
        public void ParseIBAN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..34"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse IBAN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2013
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2014
 testRunner.Given("the input is 8007GB12ABCD10203012345678", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2015
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2016
 testRunner.Then("the entity should be 8007", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2017
     testRunner.And("the AI should be 8007", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2018
  testRunner.And("the value should be GB12ABCD10203012345678", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2019
  testRunner.And("the data value should be IBAN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2020
  testRunner.And("the description should be International Bank Account Number (IBAN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2021
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2022
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD TIME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD TIME")]
        [Xunit.TraitAttribute("Category", "N4+N8[+N..4]")]
        public void ParsePRODTIME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N8[+N..4]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PROD TIME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2025
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2026
 testRunner.Given("the input is 8008231231142652", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2027
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2028
 testRunner.Then("the entity should be 8008", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2029
     testRunner.And("the AI should be 8008", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2030
  testRunner.And("the value should be 231231142652", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2031
  testRunner.And("the data value should be PROD TIME", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2032
  testRunner.And("the description should be Date and time of production", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2033
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2034
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse OPTSEN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse OPTSEN")]
        [Xunit.TraitAttribute("Category", "N4+X..50")]
        public void ParseOPTSEN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse OPTSEN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2037
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2038
 testRunner.Given("the input is 800901190531", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2039
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2040
 testRunner.Then("the entity should be 8009", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2041
     testRunner.And("the AI should be 8009", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2042
  testRunner.And("the value should be 01190531", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2043
  testRunner.And("the data value should be OPTSEN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2044
  testRunner.And("the description should be Optically readable sensor indicator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2045
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2046
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPID")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPID")]
        [Xunit.TraitAttribute("Category", "N4+Y..30")]
        public void ParseCPID()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+Y..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CPID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2049
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2050
 testRunner.Given("the input is 8010506091751DR4529P327", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2051
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2052
 testRunner.Then("the entity should be 8010", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2053
     testRunner.And("the AI should be 8010", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2054
  testRunner.And("the value should be 506091751DR4529P327", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2055
  testRunner.And("the data value should be CPID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2056
  testRunner.And("the description should be Component/Part Identifier (CPID)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2057
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2058
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPID SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPID SERIAL")]
        [Xunit.TraitAttribute("Category", "N4+N..12")]
        public void ParseCPIDSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse CPID SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2061
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2062
 testRunner.Given("the input is 8011422393761701", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2063
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2064
 testRunner.Then("the entity should be 8011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2065
     testRunner.And("the AI should be 8011", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2066
  testRunner.And("the value should be 422393761701", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2067
  testRunner.And("the data value should be CPID SERIAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2068
  testRunner.And("the description should be Component/Part Identifier serial number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2069
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2070
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VERSION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VERSION")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public void ParseVERSION()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse VERSION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2073
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2074
 testRunner.Given("the input is 801215.0.4701.1001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2075
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2076
 testRunner.Then("the entity should be 8012", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2077
     testRunner.And("the AI should be 8012", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2078
  testRunner.And("the value should be 15.0.4701.1001", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2079
  testRunner.And("the data value should be VERSION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2080
  testRunner.And("the description should be Software version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2081
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2082
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GMN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GMN")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public void ParseGMN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GMN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2085
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2086
 testRunner.Given("the input is 80131987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2087
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2088
 testRunner.Then("the entity should be 8013", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2089
     testRunner.And("the AI should be 8013", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2090
  testRunner.And("the value should be 1987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2091
  testRunner.And("the data value should be GMN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2092
  testRunner.And("the description should be Global Model Number (GMN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2093
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2094
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSRN - PROVIDER")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSRN - PROVIDER")]
        [Xunit.TraitAttribute("Category", "N4+N18")]
        public void ParseGSRN_PROVIDER()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GSRN - PROVIDER", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2097
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2098
 testRunner.Given("the input is 8017506091751000315180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2099
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2100
 testRunner.Then("the entity should be 8017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2101
     testRunner.And("the AI should be 8017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2102
  testRunner.And("the value should be 506091751000315180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2103
  testRunner.And("the data value should be GSRN - PROVIDER", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2104
  testRunner.And("the description should be Global Service Relation Number (GSRN) to identify the r" +
                        "elationship between an organisation offering services and the provider of servic" +
                        "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2105
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2106
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSRN - RECIPIENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSRN - RECIPIENT")]
        [Xunit.TraitAttribute("Category", "N4+N18")]
        public void ParseGSRN_RECIPIENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse GSRN - RECIPIENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2110
 testRunner.Given("the input is 8018506091751000315180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2111
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2112
 testRunner.Then("the entity should be 8018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2113
     testRunner.And("the AI should be 8018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2114
  testRunner.And("the value should be 506091751000315180", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2115
  testRunner.And("the data value should be GSRN - RECIPIENT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2116
  testRunner.And("the description should be Global Service Relation Number (GSRN) to identify the r" +
                        "elationship between an organisation offering services and the recipient of servi" +
                        "ces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2117
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2118
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SRIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SRIN")]
        [Xunit.TraitAttribute("Category", "N4+N..10")]
        public void ParseSRIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SRIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2122
 testRunner.Given("the input is 801900499427", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2123
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2124
 testRunner.Then("the entity should be 8019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2125
     testRunner.And("the AI should be 8019", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2126
  testRunner.And("the value should be 00499427", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2127
  testRunner.And("the data value should be SRIN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2128
  testRunner.And("the description should be Service Relation Instance Number (SRIN)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2129
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2130
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REF No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REF No.")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public void ParseREFNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse REF No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2134
 testRunner.Given("the input is 8020000B231297726310000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2135
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2136
 testRunner.Then("the entity should be 8020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2137
     testRunner.And("the AI should be 8020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2138
  testRunner.And("the value should be 000B231297726310000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2139
  testRunner.And("the data value should be REF No.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2140
  testRunner.And("the description should be Payment slip reference number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2141
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2142
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ITIP CONTENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ITIP CONTENT")]
        [Xunit.TraitAttribute("Category", "N4+N14+N2+N2")]
        public void ParseITIPCONTENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14+N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse ITIP CONTENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2146
 testRunner.Given("the input is 8026050609175100040102", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2147
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2148
 testRunner.Then("the entity should be 8026", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2149
     testRunner.And("the AI should be 8026", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2150
  testRunner.And("the value should be 050609175100040102", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2151
  testRunner.And("the data value should be ITIP CONTENT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2152
  testRunner.And("the description should be Identification of pieces of a trade item (ITIP) contain" +
                        "ed in a logistic unit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2153
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2154
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseCOUPON1()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUPON 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2158
 testRunner.Given("the input is 8110106141416543213500110000310123196000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2159
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2160
 testRunner.Then("the entity should be 8110", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2161
     testRunner.And("the AI should be 8110", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2162
  testRunner.And("the value should be 106141416543213500110000310123196000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2163
  testRunner.And("the data value should be -", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2164
  testRunner.And("the description should be Coupon code identification for use in North America", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2165
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2166
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse POINTS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse POINTS")]
        [Xunit.TraitAttribute("Category", "N4+N4")]
        public void ParsePOINTS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse POINTS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2170
 testRunner.Given("the input is 81110310", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2171
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2172
 testRunner.Then("the entity should be 8111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2173
     testRunner.And("the AI should be 8111", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2174
  testRunner.And("the value should be 0310", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2175
  testRunner.And("the data value should be POINTS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2176
  testRunner.And("the description should be Loyalty points of a coupon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2177
  testRunner.And("the length of the value should be fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2178
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParseCOUPON2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse COUPON 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2182
 testRunner.Given("the input is 8112106141416543213500110000310123196000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2183
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2184
 testRunner.Then("the entity should be 8112", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2185
     testRunner.And("the AI should be 8112", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2186
  testRunner.And("the value should be 106141416543213500110000310123196000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2187
  testRunner.And("the data value should be -", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2188
  testRunner.And("the description should be Positive offer file coupon code identification for use " +
                        "in North America", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2189
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2190
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRODUCT URL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRODUCT URL")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public void ParsePRODUCTURL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse PRODUCT URL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2194
 testRunner.Given("the input is 8200https://acme.com/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2195
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2196
 testRunner.Then("the entity should be 8200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2197
     testRunner.And("the AI should be 8200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2198
  testRunner.And("the value should be https://acme.com/", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2199
  testRunner.And("the data value should be PRODUCT URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2200
  testRunner.And("the description should be Extended packaging URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2201
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2202
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 90")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 90")]
        [Xunit.TraitAttribute("Category", "N2+X..30")]
        public void ParseINTERNAL90()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 90", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2206
 testRunner.Given("the input is 90Some+information+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2207
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2208
 testRunner.Then("the entity should be 90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2209
     testRunner.And("the AI should be 90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2210
  testRunner.And("the value should be Some+information+1234", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2211
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2212
  testRunner.And("the description should be Information mutually agreed between trading partners", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2213
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2214
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 91")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 91")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL91()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 91", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2218
 testRunner.Given("the input is 91The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2219
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2220
 testRunner.Then("the entity should be 91", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2221
     testRunner.And("the AI should be 91", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2222
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2223
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2224
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2225
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2226
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 92")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 92")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL92()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 92", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2230
 testRunner.Given("the input is 92The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2231
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2232
 testRunner.Then("the entity should be 92", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2233
     testRunner.And("the AI should be 92", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2234
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2235
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2236
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2237
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2238
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 93")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 93")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL93()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 93", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2242
 testRunner.Given("the input is 93The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2243
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2244
 testRunner.Then("the entity should be 93", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2245
     testRunner.And("the AI should be 93", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2246
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2247
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2248
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2249
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2250
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 94")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 94")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL94()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 94", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2254
 testRunner.Given("the input is 94The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2255
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2256
 testRunner.Then("the entity should be 94", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2257
     testRunner.And("the AI should be 94", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2258
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2259
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2260
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2261
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2262
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 95")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 95")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL95()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 95", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2266
 testRunner.Given("the input is 95The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2267
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2268
 testRunner.Then("the entity should be 95", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2269
     testRunner.And("the AI should be 95", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2270
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2271
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2272
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2273
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2274
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 96")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 96")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL96()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 96", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2278
 testRunner.Given("the input is 96The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2279
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2280
 testRunner.Then("the entity should be 96", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2281
     testRunner.And("the AI should be 96", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2282
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2283
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2284
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2285
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2286
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 97")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 97")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL97()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 97", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2290
 testRunner.Given("the input is 97The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2291
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2292
 testRunner.Then("the entity should be 97", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2293
     testRunner.And("the AI should be 97", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2294
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2295
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2296
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2297
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2298
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 98")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 98")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL98()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 98", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2302
 testRunner.Given("the input is 98The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2303
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2304
 testRunner.Then("the entity should be 98", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2305
     testRunner.And("the AI should be 98", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2306
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2307
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2308
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2309
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2310
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 99")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 99")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public void ParseINTERNAL99()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse INTERNAL 99", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2313
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2314
 testRunner.Given("the input is 99The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2315
 testRunner.When("the input to submitted to the parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2316
 testRunner.Then("the entity should be 99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 2317
     testRunner.And("the AI should be 99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2318
  testRunner.And("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2319
  testRunner.And("the data value should be INTERNAL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2320
  testRunner.And("the description should be Company internal information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2321
  testRunner.And("the length of the value should be variable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 2322
  testRunner.And("there should be no errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ParseEntityFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ParseEntityFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
