// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Solidsoft.Reply.Parsers.Gs1Ai.Tests.Net6.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ParseEntityFeature : object, Xunit.IClassFixture<ParseEntityFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ParseEntity", "Basic tests for each GS1 entity, based on the GS1 General Specifications.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ParseEntity.feature"
#line hidden
        
        public ParseEntityFeature(ParseEntityFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SSCO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SSCO")]
        [Xunit.TraitAttribute("Category", "N2+N18")]
        public async System.Threading.Tasks.Task ParseSSCO()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SSCO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("the input is 00001234560000000018", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("the entity should be 00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
     await testRunner.AndAsync("the AI should be 00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
  await testRunner.AndAsync("the value should be 001234560000000018", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.AndAsync("the data value should be SSCC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.AndAsync("the description should be Identification of a logistic unit (SSCC)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GTIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GTIN")]
        [Xunit.TraitAttribute("Category", "N2+N14")]
        public async System.Threading.Tasks.Task ParseGTIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GTIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
 await testRunner.GivenAsync("the input is 0112345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.ThenAsync("the entity should be 01", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
     await testRunner.AndAsync("the AI should be 01", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("the value should be 12345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("the data value should be GTIN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("the description should be Identification of a trade item (GTIN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CONTENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CONTENT")]
        [Xunit.TraitAttribute("Category", "N2+N14")]
        public async System.Threading.Tasks.Task ParseCONTENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CONTENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 31
 await testRunner.GivenAsync("the input is 0212345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync("the entity should be 02", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
     await testRunner.AndAsync("the AI should be 02", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("the value should be 12345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.AndAsync("the data value should be CONTENT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.AndAsync("the description should be Identification of trade items contained in a logistic u" +
                        "nit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MTO GTIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MTO GTIN")]
        [Xunit.TraitAttribute("Category", "N2+N14")]
        public async System.Threading.Tasks.Task ParseMTOGTIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MTO GTIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
 await testRunner.GivenAsync("the input is 0312345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.ThenAsync("the entity should be 03", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
     await testRunner.AndAsync("the AI should be 03", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("the value should be 12345678901231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
  await testRunner.AndAsync("the data value should be MTO GTIN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.AndAsync("the description should be Identification of a Made-to-Order (MtO) trade item (GTI" +
                        "N)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BATCH/LOT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BATCH/LOT")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public async System.Threading.Tasks.Task ParseBATCHLOT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BATCH/LOT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
 await testRunner.GivenAsync("the input is 10ABC123D", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
 await testRunner.ThenAsync("the entity should be 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
     await testRunner.AndAsync("the AI should be 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
  await testRunner.AndAsync("the value should be ABC123D", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
  await testRunner.AndAsync("the data value should be BATCH/LOT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
  await testRunner.AndAsync("the description should be Batch or lot number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParsePRODDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROD DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 67
 await testRunner.GivenAsync("the input is 11231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
 await testRunner.ThenAsync("the entity should be 11", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
     await testRunner.AndAsync("the AI should be 11", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.AndAsync("the data value should be PROD DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
  await testRunner.AndAsync("the description should be Production date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DUE DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DUE DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParseDUEDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DUE DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 79
 await testRunner.GivenAsync("the input is 12231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 80
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 81
 await testRunner.ThenAsync("the entity should be 12", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 82
     await testRunner.AndAsync("the AI should be 12", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
  await testRunner.AndAsync("the data value should be DUE DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
  await testRunner.AndAsync("the description should be Due date for amount on payment slip", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PACK DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PACK DATE")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParsePACKDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PACK DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 91
 await testRunner.GivenAsync("the input is 13231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 92
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
 await testRunner.ThenAsync("the entity should be 13", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 94
     await testRunner.AndAsync("the AI should be 13", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
  await testRunner.AndAsync("the data value should be PACK DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
  await testRunner.AndAsync("the description should be Packaging date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 98
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BEST BEFORE or BEST BY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BEST BEFORE or BEST BY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParseBESTBEFOREOrBESTBY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BEST BEFORE or BEST BY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 103
 await testRunner.GivenAsync("the input is 15231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 104
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 105
 await testRunner.ThenAsync("the entity should be 15", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 106
     await testRunner.AndAsync("the AI should be 15", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
  await testRunner.AndAsync("the data value should be BEST BEFORE or BEST BY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
  await testRunner.AndAsync("the description should be Best before date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SELL BY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SELL BY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParseSELLBY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SELL BY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 115
 await testRunner.GivenAsync("the input is 16231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 116
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 117
 await testRunner.ThenAsync("the entity should be 16", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 118
     await testRunner.AndAsync("the AI should be 16", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 119
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 120
  await testRunner.AndAsync("the data value should be SELL BY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 121
  await testRunner.AndAsync("the description should be Sell by date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 123
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse USE BY OR EXPIRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse USE BY OR EXPIRY")]
        [Xunit.TraitAttribute("Category", "N2+N6")]
        public async System.Threading.Tasks.Task ParseUSEBYOREXPIRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse USE BY OR EXPIRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 127
 await testRunner.GivenAsync("the input is 17231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 128
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 129
 await testRunner.ThenAsync("the entity should be 17", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 130
     await testRunner.AndAsync("the AI should be 17", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 131
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 132
  await testRunner.AndAsync("the data value should be USE BY OR EXPIRY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 133
  await testRunner.AndAsync("the description should be Expiration date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 135
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VARIANT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VARIANT")]
        [Xunit.TraitAttribute("Category", "N2+N2")]
        public async System.Threading.Tasks.Task ParseVARIANT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VARIANT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 139
 await testRunner.GivenAsync("the input is 2001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 140
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 141
 await testRunner.ThenAsync("the entity should be 20", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 142
     await testRunner.AndAsync("the AI should be 20", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 143
  await testRunner.AndAsync("the value should be 01", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
  await testRunner.AndAsync("the data value should be VARIANT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
  await testRunner.AndAsync("the description should be Internal product variant", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 147
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SERIAL")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public async System.Threading.Tasks.Task ParseSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 151
 await testRunner.GivenAsync("the input is 217337203174393624", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 152
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 153
 await testRunner.ThenAsync("the entity should be 21", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 154
     await testRunner.AndAsync("the AI should be 21", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 155
  await testRunner.AndAsync("the value should be 7337203174393624", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 156
  await testRunner.AndAsync("the data value should be SERIAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 157
  await testRunner.AndAsync("the description should be Serial number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 158
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 159
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPV")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPV")]
        [Xunit.TraitAttribute("Category", "N2+X..20")]
        public async System.Threading.Tasks.Task ParseCPV()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CPV", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 163
 await testRunner.GivenAsync("the input is 22733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 164
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 165
 await testRunner.ThenAsync("the entity should be 22", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 166
     await testRunner.AndAsync("the AI should be 22", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 167
  await testRunner.AndAsync("the value should be 733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 168
  await testRunner.AndAsync("the data value should be CPV", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 169
  await testRunner.AndAsync("the description should be Consumer product variant", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 170
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 171
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse TPX")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse TPX")]
        [Xunit.TraitAttribute("Category", "N3+X..28")]
        public async System.Threading.Tasks.Task ParseTPX()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..28"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse TPX", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 175
 await testRunner.GivenAsync("the input is 235733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 176
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 177
 await testRunner.ThenAsync("the entity should be 235", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 178
     await testRunner.AndAsync("the AI should be 235", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 179
  await testRunner.AndAsync("the value should be 733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 180
  await testRunner.AndAsync("the data value should be TPX", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 181
  await testRunner.AndAsync("the description should be Third Party Controlled, Serialised Extension of Global " +
                        "Trade Item Number (GTIN) (TPX)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 182
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 183
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ADDITIONAL ID")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ADDITIONAL ID")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseADDITIONALID()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ADDITIONAL ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 187
 await testRunner.GivenAsync("the input is 240This+is+some+identifier+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 188
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 189
 await testRunner.ThenAsync("the entity should be 240", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 190
     await testRunner.AndAsync("the AI should be 240", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 191
  await testRunner.AndAsync("the value should be This+is+some+identifier+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 192
  await testRunner.AndAsync("the data value should be ADDITIONAL ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 193
  await testRunner.AndAsync("the description should be Additional product identification assigned by the manuf" +
                        "acturer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 194
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 195
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CUST. PART No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CUST. PART No.")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseCUST_PARTNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CUST. PART No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 199
 await testRunner.GivenAsync("the input is 241This+is+some+part+no+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 200
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 201
 await testRunner.ThenAsync("the entity should be 241", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 202
     await testRunner.AndAsync("the AI should be 241", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 203
  await testRunner.AndAsync("the value should be This+is+some+part+no+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 204
  await testRunner.AndAsync("the data value should be CUST. PART No.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 205
  await testRunner.AndAsync("the description should be Customer part number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 206
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 207
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MTO VARIANT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MTO VARIANT")]
        [Xunit.TraitAttribute("Category", "N3+N..6")]
        public async System.Threading.Tasks.Task ParseMTOVARIANT()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N..6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MTO VARIANT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 211
 await testRunner.GivenAsync("the input is 2421234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 212
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 213
 await testRunner.ThenAsync("the entity should be 242", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 214
     await testRunner.AndAsync("the AI should be 242", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 215
  await testRunner.AndAsync("the value should be 1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 216
  await testRunner.AndAsync("the data value should be MTO VARIANT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 217
  await testRunner.AndAsync("the description should be Made-to-Order variation number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 218
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 219
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PCN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PCN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParsePCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PCN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 223
 await testRunner.GivenAsync("the input is 243This+is+some+pcn+123", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 224
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 225
 await testRunner.ThenAsync("the entity should be 243", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 226
     await testRunner.AndAsync("the AI should be 243", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 227
  await testRunner.AndAsync("the value should be This+is+some+pcn+123", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 228
  await testRunner.AndAsync("the data value should be PCN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 229
  await testRunner.AndAsync("the description should be Packaging component number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 230
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 231
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SECONDARY SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SECONDARY SERIAL")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseSECONDARYSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SECONDARY SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 235
 await testRunner.GivenAsync("the input is 250733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 236
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 237
 await testRunner.ThenAsync("the entity should be 250", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 238
     await testRunner.AndAsync("the AI should be 250", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 239
  await testRunner.AndAsync("the value should be 733AC720317439R3624", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 240
  await testRunner.AndAsync("the data value should be SECONDARY SERIAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 241
  await testRunner.AndAsync("the description should be Secondary serial number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 242
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 243
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REF. TO SOURCE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REF. TO SOURCE")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseREF_TOSOURCE()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse REF. TO SOURCE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 247
 await testRunner.GivenAsync("the input is 251This+is+some+reference+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 248
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 249
 await testRunner.ThenAsync("the entity should be 251", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 250
     await testRunner.AndAsync("the AI should be 251", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 251
  await testRunner.AndAsync("the value should be This+is+some+reference+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 252
  await testRunner.AndAsync("the data value should be REF. TO SOURCE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 253
  await testRunner.AndAsync("the description should be Reference to source entity", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 254
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 255
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GDTI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GDTI")]
        [Xunit.TraitAttribute("Category", "N3+N13[+X..17]")]
        public async System.Threading.Tasks.Task ParseGDTI()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13[+X..17]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GDTI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 259
 await testRunner.GivenAsync("the input is 2531234567890128733AC720317439R36", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 260
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 261
 await testRunner.ThenAsync("the entity should be 253", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 262
     await testRunner.AndAsync("the AI should be 253", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 263
  await testRunner.AndAsync("the value should be 1234567890128733AC720317439R36", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 264
  await testRunner.AndAsync("the data value should be GDTI", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 265
  await testRunner.AndAsync("the description should be Global Document Type Identifier (GDTI)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 266
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 267
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GLN EXTENSION COMPONENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GLN EXTENSION COMPONENT")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseGLNEXTENSIONCOMPONENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GLN EXTENSION COMPONENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 270
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 271
 await testRunner.GivenAsync("the input is 254Gln+Extension+254", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 272
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 273
 await testRunner.ThenAsync("the entity should be 254", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 274
     await testRunner.AndAsync("the AI should be 254", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 275
  await testRunner.AndAsync("the value should be Gln+Extension+254", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 276
  await testRunner.AndAsync("the data value should be GLN EXTENSION COMPONENT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 277
  await testRunner.AndAsync("the description should be Global Location Number (GLN) extension component", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 278
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 279
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse Global Coupon Number (GCN)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse Global Coupon Number (GCN)")]
        [Xunit.TraitAttribute("Category", "N3+N13[+N..12]")]
        public async System.Threading.Tasks.Task ParseGlobalCouponNumberGCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13[+N..12]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse Global Coupon Number (GCN)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 282
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 283
 await testRunner.GivenAsync("the input is 2551234567890128733720317439", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 284
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 285
 await testRunner.ThenAsync("the entity should be 255", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 286
     await testRunner.AndAsync("the AI should be 255", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 287
  await testRunner.AndAsync("the value should be 1234567890128733720317439", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 288
  await testRunner.AndAsync("the data value should be GCN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 289
  await testRunner.AndAsync("the description should be Global Coupon Number (GCN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 290
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 291
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VAR. COUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VAR. COUNT")]
        [Xunit.TraitAttribute("Category", "N2+N..8")]
        public async System.Threading.Tasks.Task ParseVAR_COUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N..8"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VAR. COUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 295
 await testRunner.GivenAsync("the input is 30000999", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 296
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 297
 await testRunner.ThenAsync("the entity should be 30", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 298
     await testRunner.AndAsync("the AI should be 30", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 299
  await testRunner.AndAsync("the value should be 000999", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 300
  await testRunner.AndAsync("the data value should be VAR. COUNT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 301
  await testRunner.AndAsync("the description should be Variable count of items", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 302
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 303
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (kg)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (kg)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETWEIGHTKg()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET WEIGHT (kg)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 306
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 307
 await testRunner.GivenAsync("the input is 3102123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 308
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 309
 await testRunner.ThenAsync("the entity should be 310", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 310
     await testRunner.AndAsync("the AI should be 3102", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 311
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 312
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 313
  await testRunner.AndAsync("the data value should be NET WEIGHT (kg)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 314
  await testRunner.AndAsync("the description should be Net weight, kilograms (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 315
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 316
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 319
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 320
 await testRunner.GivenAsync("the input is 3112123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 321
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 322
 await testRunner.ThenAsync("the entity should be 311", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 323
     await testRunner.AndAsync("the AI should be 3112", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 324
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 325
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 326
  await testRunner.AndAsync("the data value should be LENGTH (m)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 327
  await testRunner.AndAsync("the description should be Length or first dimension, metres (variable measure tra" +
                        "de item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 328
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 329
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 332
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 333
 await testRunner.GivenAsync("the input is 3122123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 334
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 335
 await testRunner.ThenAsync("the entity should be 312", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 336
     await testRunner.AndAsync("the AI should be 3122", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 337
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 338
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 339
  await testRunner.AndAsync("the data value should be WIDTH (m)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 340
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, metres (variable " +
                        "measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 341
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 342
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (m)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (m)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (m)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 345
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 346
 await testRunner.GivenAsync("the input is 3132123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 347
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 348
 await testRunner.ThenAsync("the entity should be 313", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 349
     await testRunner.AndAsync("the AI should be 3132", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 350
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 351
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 352
  await testRunner.AndAsync("the data value should be HEIGHT (m)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 353
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, metres (v" +
                        "ariable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 354
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 355
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (m²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (m²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (m²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 358
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 359
 await testRunner.GivenAsync("the input is 3142123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 360
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 361
 await testRunner.ThenAsync("the entity should be 314", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 362
     await testRunner.AndAsync("the AI should be 3142", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 363
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 364
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 365
  await testRunner.AndAsync("the data value should be AREA (m²)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 366
  await testRunner.AndAsync("the description should be Area, square metres (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 367
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 368
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (l)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (l)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETVOLUMEL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET VOLUME (l)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 371
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 372
 await testRunner.GivenAsync("the input is 3152123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 373
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 374
 await testRunner.ThenAsync("the entity should be 315", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 375
     await testRunner.AndAsync("the AI should be 3152", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 376
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 377
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 378
  await testRunner.AndAsync("the data value should be NET VOLUME (l)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 379
  await testRunner.AndAsync("the description should be Net volume, litres (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 380
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 381
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (m³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (m³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETVOLUMEM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET VOLUME (m³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 384
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 385
 await testRunner.GivenAsync("the input is 3162123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 386
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 387
 await testRunner.ThenAsync("the entity should be 316", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 388
     await testRunner.AndAsync("the AI should be 3162", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 389
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 390
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 391
  await testRunner.AndAsync("the data value should be NET VOLUME (m³)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 392
  await testRunner.AndAsync("the description should be Net volume, cubic metres (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 393
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 394
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (lb)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (lb)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETWEIGHTLb()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET WEIGHT (lb)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 397
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 398
 await testRunner.GivenAsync("the input is 3202123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 399
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 400
 await testRunner.ThenAsync("the entity should be 320", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 401
     await testRunner.AndAsync("the AI should be 3202", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 402
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 403
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 404
  await testRunner.AndAsync("the data value should be NET WEIGHT (lb)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 405
  await testRunner.AndAsync("the description should be Net weight, pounds (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 406
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 407
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 410
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 411
 await testRunner.GivenAsync("the input is 3212123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 412
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 413
 await testRunner.ThenAsync("the entity should be 321", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 414
     await testRunner.AndAsync("the AI should be 3212", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 415
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 416
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 417
  await testRunner.AndAsync("the data value should be LENGTH (i)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 418
  await testRunner.AndAsync("the description should be Length or first dimension, inches (variable measure tra" +
                        "de item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 419
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 420
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 423
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 424
 await testRunner.GivenAsync("the input is 3222123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 425
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 426
 await testRunner.ThenAsync("the entity should be 322", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 427
     await testRunner.AndAsync("the AI should be 3222", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 428
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 429
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 430
  await testRunner.AndAsync("the data value should be LENGTH (f)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 431
  await testRunner.AndAsync("the description should be Length or first dimension, feet (variable measure trade" +
                        " item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 432
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 433
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 436
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 437
 await testRunner.GivenAsync("the input is 3232123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 438
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 439
 await testRunner.ThenAsync("the entity should be 323", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 440
     await testRunner.AndAsync("the AI should be 3232", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 441
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 442
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 443
  await testRunner.AndAsync("the data value should be LENGTH (y)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 444
  await testRunner.AndAsync("the description should be Length or first dimension, yards (variable measure trad" +
                        "e item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 445
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 446
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 449
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 450
 await testRunner.GivenAsync("the input is 3242123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 451
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 452
 await testRunner.ThenAsync("the entity should be 324", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 453
     await testRunner.AndAsync("the AI should be 3242", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 454
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 455
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 456
  await testRunner.AndAsync("the data value should be WIDTH (i)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 457
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, inches (variable " +
                        "measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 458
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 459
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 462
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 463
 await testRunner.GivenAsync("the input is 3252123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 464
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 465
 await testRunner.ThenAsync("the entity should be 325", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 466
     await testRunner.AndAsync("the AI should be 3252", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 467
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 468
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 469
  await testRunner.AndAsync("the data value should be WIDTH (f)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 470
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, feet (variable me" +
                        "asure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 471
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 472
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 475
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 476
 await testRunner.GivenAsync("the input is 3262123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 477
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 478
 await testRunner.ThenAsync("the entity should be 326", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 479
     await testRunner.AndAsync("the AI should be 3262", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 480
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 481
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 482
  await testRunner.AndAsync("the data value should be WIDTH (y)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 483
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, yards (variable m" +
                        "easure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 484
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 485
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (i)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (i)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (i)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 488
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 489
 await testRunner.GivenAsync("the input is 3272123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 490
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 491
 await testRunner.ThenAsync("the entity should be 327", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 492
     await testRunner.AndAsync("the AI should be 3272", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 493
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 494
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 495
  await testRunner.AndAsync("the data value should be HEIGHT (i)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 496
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, inches (v" +
                        "ariable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 497
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 498
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (f)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (f)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (f)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 501
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 502
 await testRunner.GivenAsync("the input is 3282123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 503
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 504
 await testRunner.ThenAsync("the entity should be 328", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 505
     await testRunner.AndAsync("the AI should be 3282", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 506
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 507
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 508
  await testRunner.AndAsync("the data value should be HEIGHT (f)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 509
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, feet (var" +
                        "iable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 510
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 511
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (y)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (y)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (y)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 514
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 515
 await testRunner.GivenAsync("the input is 3292123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 516
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 517
 await testRunner.ThenAsync("the entity should be 329", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 518
     await testRunner.AndAsync("the AI should be 3292", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 519
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 520
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 521
  await testRunner.AndAsync("the data value should be HEIGHT (y)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 522
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, yards (va" +
                        "riable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 523
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 524
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GROSS WEIGHT (kg)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GROSS WEIGHT (kg)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseGROSSWEIGHTKg()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GROSS WEIGHT (kg)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 527
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 528
 await testRunner.GivenAsync("the input is 3302123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 529
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 530
 await testRunner.ThenAsync("the entity should be 330", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 531
     await testRunner.AndAsync("the AI should be 3302", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 532
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 533
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 534
  await testRunner.AndAsync("the data value should be GROSS WEIGHT (kg)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 535
  await testRunner.AndAsync("the description should be Logistic weight, kilograms", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 536
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 537
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 540
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 541
 await testRunner.GivenAsync("the input is 3312123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 542
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 543
 await testRunner.ThenAsync("the entity should be 331", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 544
     await testRunner.AndAsync("the AI should be 3312", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 545
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 546
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 547
  await testRunner.AndAsync("the data value should be LENGTH (m), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 548
  await testRunner.AndAsync("the description should be Length or first dimension, metres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 549
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 550
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 553
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 554
 await testRunner.GivenAsync("the input is 3322123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 555
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 556
 await testRunner.ThenAsync("the entity should be 332", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 557
     await testRunner.AndAsync("the AI should be 3322", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 558
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 559
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 560
  await testRunner.AndAsync("the data value should be WIDTH (m), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 561
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, metres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 562
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 563
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (m), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (m), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (m), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 566
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 567
 await testRunner.GivenAsync("the input is 3332123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 568
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 569
 await testRunner.ThenAsync("the entity should be 333", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 570
     await testRunner.AndAsync("the AI should be 3332", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 571
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 572
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 573
  await testRunner.AndAsync("the data value should be HEIGHT (m), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 574
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, metres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 575
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 576
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (m²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (m²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (m²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 579
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 580
 await testRunner.GivenAsync("the input is 3342123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 581
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 582
 await testRunner.ThenAsync("the entity should be 334", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 583
     await testRunner.AndAsync("the AI should be 3342", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 584
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 585
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 586
  await testRunner.AndAsync("the data value should be AREA (m²), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 587
  await testRunner.AndAsync("the description should be Area, square metres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 588
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 589
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (l), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (l), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMELLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (l), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 592
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 593
 await testRunner.GivenAsync("the input is 3352123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 594
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 595
 await testRunner.ThenAsync("the entity should be 335", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 596
     await testRunner.AndAsync("the AI should be 3352", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 597
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 598
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 599
  await testRunner.AndAsync("the data value should be VOLUME (l), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 600
  await testRunner.AndAsync("the description should be Logistic volume, litres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 601
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 602
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (m³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (m³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEMLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (m³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 605
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 606
 await testRunner.GivenAsync("the input is 3362123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 607
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 608
 await testRunner.ThenAsync("the entity should be 336", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 609
     await testRunner.AndAsync("the AI should be 3362", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 610
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 611
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 612
  await testRunner.AndAsync("the data value should be VOLUME (m³), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 613
  await testRunner.AndAsync("the description should be Logistic volume, cubic metres", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 614
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 615
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse KG PER m²")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse KG PER m²")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseKGPERM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse KG PER m²", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 618
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 619
 await testRunner.GivenAsync("the input is 3372123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 620
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 621
 await testRunner.ThenAsync("the entity should be 337", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 622
     await testRunner.AndAsync("the AI should be 3372", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 623
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 624
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 625
  await testRunner.AndAsync("the data value should be KG PER m²", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 626
  await testRunner.AndAsync("the description should be Kilograms per square metre", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 627
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 628
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GROSS WEIGHT (lb)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GROSS WEIGHT (lb)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseGROSSWEIGHTLb()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GROSS WEIGHT (lb)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 631
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 632
 await testRunner.GivenAsync("the input is 3402123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 633
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 634
 await testRunner.ThenAsync("the entity should be 340", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 635
     await testRunner.AndAsync("the AI should be 3402", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 636
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 637
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 638
  await testRunner.AndAsync("the data value should be GROSS WEIGHT (lb)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 639
  await testRunner.AndAsync("the description should be Logistic weight, pounds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 640
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 641
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 644
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 645
 await testRunner.GivenAsync("the input is 3412123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 646
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 647
 await testRunner.ThenAsync("the entity should be 341", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 648
     await testRunner.AndAsync("the AI should be 3412", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 649
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 650
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 651
  await testRunner.AndAsync("the data value should be LENGTH (i), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 652
  await testRunner.AndAsync("the description should be Length or first dimension, inches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 653
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 654
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 657
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 658
 await testRunner.GivenAsync("the input is 3422123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 659
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 660
 await testRunner.ThenAsync("the entity should be 342", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 661
     await testRunner.AndAsync("the AI should be 3422", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 662
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 663
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 664
  await testRunner.AndAsync("the data value should be LENGTH (f), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 665
  await testRunner.AndAsync("the description should be Length or first dimension, feet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 666
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 667
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LENGTH (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LENGTH (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseLENGTHYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LENGTH (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 670
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 671
 await testRunner.GivenAsync("the input is 3432123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 672
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 673
 await testRunner.ThenAsync("the entity should be 343", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 674
     await testRunner.AndAsync("the AI should be 3432", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 675
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 676
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 677
  await testRunner.AndAsync("the data value should be LENGTH (y), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 678
  await testRunner.AndAsync("the description should be Length or first dimension, yards", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 679
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 680
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 683
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 684
 await testRunner.GivenAsync("the input is 3442123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 685
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 686
 await testRunner.ThenAsync("the entity should be 344", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 687
     await testRunner.AndAsync("the AI should be 3442", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 688
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 689
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 690
  await testRunner.AndAsync("the data value should be WIDTH (i), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 691
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, inches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 692
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 693
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 698
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 699
 await testRunner.GivenAsync("the input is 3452123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 700
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 701
 await testRunner.ThenAsync("the entity should be 345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 702
     await testRunner.AndAsync("the AI should be 3452", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 703
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 704
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 705
  await testRunner.AndAsync("the data value should be WIDTH (f), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 706
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, feet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 707
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 708
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse WIDTH (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse WIDTH (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseWIDTHYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse WIDTH (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 711
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 712
 await testRunner.GivenAsync("the input is 3462123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 713
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 714
 await testRunner.ThenAsync("the entity should be 346", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 715
     await testRunner.AndAsync("the AI should be 3462", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 716
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 717
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 718
  await testRunner.AndAsync("the data value should be WIDTH (y), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 719
  await testRunner.AndAsync("the description should be Width, diameter, or second dimension, yard", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 720
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 721
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (i), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (i), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (i), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 724
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 725
 await testRunner.GivenAsync("the input is 3472123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 726
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 727
 await testRunner.ThenAsync("the entity should be 347", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 728
     await testRunner.AndAsync("the AI should be 3472", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 729
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 730
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 731
  await testRunner.AndAsync("the data value should be HEIGHT (i), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 732
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, inches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 733
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 734
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (f), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (f), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (f), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 737
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 738
 await testRunner.GivenAsync("the input is 3482123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 739
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 740
 await testRunner.ThenAsync("the entity should be 348", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 741
     await testRunner.AndAsync("the AI should be 3482", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 742
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 743
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 744
  await testRunner.AndAsync("the data value should be HEIGHT (f), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 745
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, feet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 746
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 747
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HEIGHT (y), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HEIGHT (y), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseHEIGHTYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HEIGHT (y), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 750
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 751
 await testRunner.GivenAsync("the input is 3492123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 752
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 753
 await testRunner.ThenAsync("the entity should be 349", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 754
     await testRunner.AndAsync("the AI should be 3492", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 755
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 756
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 757
  await testRunner.AndAsync("the data value should be HEIGHT (y), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 758
  await testRunner.AndAsync("the description should be Depth, thickness, height, or third dimension, yards", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 759
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 760
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (i²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (i²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (i²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 763
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 764
 await testRunner.GivenAsync("the input is 3502123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 765
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 766
 await testRunner.ThenAsync("the entity should be 350", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 767
     await testRunner.AndAsync("the AI should be 3502", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 768
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 769
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 770
  await testRunner.AndAsync("the data value should be AREA (i²)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 771
  await testRunner.AndAsync("the description should be Area, square inches (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 772
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 773
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (f²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (f²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (f²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 776
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 777
 await testRunner.GivenAsync("the input is 3512123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 778
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 779
 await testRunner.ThenAsync("the entity should be 351", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 780
     await testRunner.AndAsync("the AI should be 3512", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 781
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 782
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 783
  await testRunner.AndAsync("the data value should be AREA (f²)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 784
  await testRunner.AndAsync("the description should be Area, square feet (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 785
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 786
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (y²)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (y²)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (y²)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 789
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 790
 await testRunner.GivenAsync("the input is 3522123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 791
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 792
 await testRunner.ThenAsync("the entity should be 352", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 793
     await testRunner.AndAsync("the AI should be 3522", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 794
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 795
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 796
  await testRunner.AndAsync("the data value should be AREA (y²)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 797
  await testRunner.AndAsync("the description should be Area, square yards (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 798
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 799
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (i²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (i²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (i²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 802
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 803
 await testRunner.GivenAsync("the input is 3532123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 804
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 805
 await testRunner.ThenAsync("the entity should be 353", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 806
     await testRunner.AndAsync("the AI should be 3532", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 807
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 808
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 809
  await testRunner.AndAsync("the data value should be AREA (i²), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 810
  await testRunner.AndAsync("the description should be Area, square inches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 811
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 812
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (f²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (f²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (f²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 815
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 816
 await testRunner.GivenAsync("the input is 3542123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 817
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 818
 await testRunner.ThenAsync("the entity should be 354", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 819
     await testRunner.AndAsync("the AI should be 3542", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 820
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 821
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 822
  await testRunner.AndAsync("the data value should be AREA (f²), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 823
  await testRunner.AndAsync("the description should be Area, square feet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 824
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 825
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AREA (y²), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AREA (y²), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseAREAYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AREA (y²), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 828
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 829
 await testRunner.GivenAsync("the input is 3552123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 830
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 831
 await testRunner.ThenAsync("the entity should be 355", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 832
     await testRunner.AndAsync("the AI should be 3552", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 833
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 834
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 835
  await testRunner.AndAsync("the data value should be AREA (y²), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 836
  await testRunner.AndAsync("the description should be Area, square yards", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 837
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 838
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET WEIGHT (t)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET WEIGHT (t)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETWEIGHTT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET WEIGHT (t)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 841
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 842
 await testRunner.GivenAsync("the input is 3562123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 843
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 844
 await testRunner.ThenAsync("the entity should be 356", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 845
     await testRunner.AndAsync("the AI should be 3562", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 846
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 847
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 848
  await testRunner.AndAsync("the data value should be NET WEIGHT (t)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 849
  await testRunner.AndAsync("the description should be Net weight, troy ounces (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 850
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 851
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (oz)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (oz)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETVOLUMEOz()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET VOLUME (oz)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 854
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 855
 await testRunner.GivenAsync("the input is 3572123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 856
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 857
 await testRunner.ThenAsync("the entity should be 357", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 858
     await testRunner.AndAsync("the AI should be 3572", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 859
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 860
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 861
  await testRunner.AndAsync("the data value should be NET VOLUME (oz)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 862
  await testRunner.AndAsync("the description should be Net weight (or volume), ounces (variable measure trade " +
                        "item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 863
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 864
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (q)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (q)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETVOLUMEQ()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET VOLUME (q)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 867
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 868
 await testRunner.GivenAsync("the input is 3602123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 869
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 870
 await testRunner.ThenAsync("the entity should be 360", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 871
     await testRunner.AndAsync("the AI should be 3602", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 872
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 873
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 874
  await testRunner.AndAsync("the data value should be NET VOLUME (q)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 875
  await testRunner.AndAsync("the description should be Net volume, quarts (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 876
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 877
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NET VOLUME (g)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NET VOLUME (g)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseNETVOLUMEG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NET VOLUME (g)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 880
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 881
 await testRunner.GivenAsync("the input is 3612123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 882
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 883
 await testRunner.ThenAsync("the entity should be 361", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 884
     await testRunner.AndAsync("the AI should be 3612", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 885
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 886
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 887
  await testRunner.AndAsync("the data value should be NET VOLUME (g)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 888
  await testRunner.AndAsync("the description should be Net volume, gallons U.S. (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 889
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 890
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (q), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (q), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEQLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (q), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 893
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 894
 await testRunner.GivenAsync("the input is 3622123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 895
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 896
 await testRunner.ThenAsync("the entity should be 362", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 897
     await testRunner.AndAsync("the AI should be 3622", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 898
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 899
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 900
  await testRunner.AndAsync("the data value should be VOLUME (q), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 901
  await testRunner.AndAsync("the description should be Logistic volume, quarts", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 902
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 903
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (g), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (g), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEGLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (g), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 906
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 907
 await testRunner.GivenAsync("the input is 3632123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 908
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 909
 await testRunner.ThenAsync("the entity should be 363", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 910
     await testRunner.AndAsync("the AI should be 3632", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 911
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 912
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 913
  await testRunner.AndAsync("the data value should be VOLUME (g), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 914
  await testRunner.AndAsync("the description should be Logistic volume, gallons U.S.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 915
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 916
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (i³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (i³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (i³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 919
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 920
 await testRunner.GivenAsync("the input is 3642123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 921
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 922
 await testRunner.ThenAsync("the entity should be 364", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 923
     await testRunner.AndAsync("the AI should be 3642", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 924
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 925
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 926
  await testRunner.AndAsync("the data value should be VOLUME (i³)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 927
  await testRunner.AndAsync("the description should be Net volume, cubic inches (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 928
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 929
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (f³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (f³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (f³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 932
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 933
 await testRunner.GivenAsync("the input is 3652123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 934
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 935
 await testRunner.ThenAsync("the entity should be 365", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 936
     await testRunner.AndAsync("the AI should be 3652", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 937
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 938
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 939
  await testRunner.AndAsync("the data value should be VOLUME (f³)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 940
  await testRunner.AndAsync("the description should be Net volume, cubic feet (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 941
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 942
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (y³)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (y³)")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (y³)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 945
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 946
 await testRunner.GivenAsync("the input is 3662123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 947
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 948
 await testRunner.ThenAsync("the entity should be 366", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 949
     await testRunner.AndAsync("the AI should be 3662", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 950
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 951
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 952
  await testRunner.AndAsync("the data value should be VOLUME (y³)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 953
  await testRunner.AndAsync("the description should be Net volume, cubic yards (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 954
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 955
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (i³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (i³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEILog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (i³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 958
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 959
 await testRunner.GivenAsync("the input is 3672123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 960
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 961
 await testRunner.ThenAsync("the entity should be 367", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 962
     await testRunner.AndAsync("the AI should be 3672", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 963
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 964
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 965
  await testRunner.AndAsync("the data value should be VOLUME (i³), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 966
  await testRunner.AndAsync("the description should be Logistic volume, cubic inches", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 967
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 968
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (f³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (f³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEFLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (f³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 971
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 972
 await testRunner.GivenAsync("the input is 3682123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 973
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 974
 await testRunner.ThenAsync("the entity should be 368", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 975
     await testRunner.AndAsync("the AI should be 3682", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 976
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 977
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 978
  await testRunner.AndAsync("the data value should be VOLUME (f³), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 979
  await testRunner.AndAsync("the description should be Logistic volume, cubic feet", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 980
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 981
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VOLUME (y³), log")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VOLUME (y³), log")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseVOLUMEYLog()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VOLUME (y³), log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 984
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 985
 await testRunner.GivenAsync("the input is 3692123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 986
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 987
 await testRunner.ThenAsync("the entity should be 369", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 988
     await testRunner.AndAsync("the AI should be 3692", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 989
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 990
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 991
  await testRunner.AndAsync("the data value should be VOLUME (y³), log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 992
  await testRunner.AndAsync("the description should be Logistic volume, cubic yards", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 993
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 994
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNT")]
        [Xunit.TraitAttribute("Category", "N2+N..8")]
        public async System.Threading.Tasks.Task ParseCOUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+N..8"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 997
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 998
 await testRunner.GivenAsync("the input is 3712345678", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 999
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1000
 await testRunner.ThenAsync("the entity should be 37", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1001
     await testRunner.AndAsync("the AI should be 37", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1002
  await testRunner.AndAsync("the value should be 12345678", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1003
  await testRunner.AndAsync("the data value should be COUNT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1004
  await testRunner.AndAsync("the description should be Count of trade items or trade item pieces contained in " +
                        "a logistic unit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1005
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1006
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AMOUNT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AMOUNT")]
        [Xunit.TraitAttribute("Category", "N4+N..15")]
        public async System.Threading.Tasks.Task ParseAMOUNT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AMOUNT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1009
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1010
 await testRunner.GivenAsync("the input is 3902123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1011
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1012
 await testRunner.ThenAsync("the entity should be 390", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1013
     await testRunner.AndAsync("the AI should be 3902", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1014
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1015
  await testRunner.AndAsync("the value should be 123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1016
  await testRunner.AndAsync("the data value should be AMOUNT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1017
  await testRunner.AndAsync("the description should be Amount payable or coupon value - Single monetary area", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1018
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1019
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AMOUNT (ISO)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AMOUNT (ISO)")]
        [Xunit.TraitAttribute("Category", "N4+N3+N..15")]
        public async System.Threading.Tasks.Task ParseAMOUNTISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AMOUNT (ISO)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1022
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1023
 await testRunner.GivenAsync("the input is 3912826123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1024
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1025
 await testRunner.ThenAsync("the entity should be 391", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1026
     await testRunner.AndAsync("the AI should be 3912", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1027
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1028
  await testRunner.AndAsync("the value should be 826123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1029
  await testRunner.AndAsync("the data value should be AMOUNT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1030
  await testRunner.AndAsync("the description should be Amount payable and ISO currency code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1031
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1032
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE")]
        [Xunit.TraitAttribute("Category", "N4+N..15")]
        public async System.Threading.Tasks.Task ParsePRICE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRICE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1035
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1036
 await testRunner.GivenAsync("the input is 3922123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1037
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1038
 await testRunner.ThenAsync("the entity should be 392", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1039
     await testRunner.AndAsync("the AI should be 3922", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1040
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1041
  await testRunner.AndAsync("the value should be 123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1042
  await testRunner.AndAsync("the data value should be PRICE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1043
  await testRunner.AndAsync("the description should be Amount payable for a variable measure trade item - Sing" +
                        "le monetary area", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1044
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1045
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE (ISO)")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE (ISO)")]
        [Xunit.TraitAttribute("Category", "N4+N3+N..15")]
        public async System.Threading.Tasks.Task ParsePRICEISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+N..15"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRICE (ISO)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1048
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1049
 await testRunner.GivenAsync("the input is 3932826123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1050
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1051
 await testRunner.ThenAsync("the entity should be 393", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1052
     await testRunner.AndAsync("the AI should be 3932", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1053
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1054
  await testRunner.AndAsync("the value should be 826123456789012345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1055
  await testRunner.AndAsync("the data value should be PRICE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1056
  await testRunner.AndAsync("the description should be Amount payable for a variable measure trade item and IS" +
                        "O currency code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1057
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1058
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRCNT OFF")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRCNT OFF")]
        [Xunit.TraitAttribute("Category", "N4+N4")]
        public async System.Threading.Tasks.Task ParsePRCNTOFF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRCNT OFF", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1061
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1062
 await testRunner.GivenAsync("the input is 39421234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1063
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1064
 await testRunner.ThenAsync("the entity should be 394", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1065
     await testRunner.AndAsync("the AI should be 3942", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1066
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1067
  await testRunner.AndAsync("the value should be 1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1068
  await testRunner.AndAsync("the data value should be PRCNT OFF", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1069
  await testRunner.AndAsync("the description should be Percentage discount of a coupon", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1070
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1071
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE/UoM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE/UoM")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParsePRICEUoM()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRICE/UoM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1074
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1075
 await testRunner.GivenAsync("the input is 3952123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1076
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1077
 await testRunner.ThenAsync("the entity should be 395", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1078
     await testRunner.AndAsync("the AI should be 3952", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1079
  await testRunner.AndAsync("the inverse exponent should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1080
  await testRunner.AndAsync("the value should be 123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1081
  await testRunner.AndAsync("the data value should be PRICE/UoM", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1082
  await testRunner.AndAsync("the description should be Amount payable per unit of measure single monetary area" +
                        " (variable measure trade item)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1083
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1084
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORDER NUMBER")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORDER NUMBER")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseORDERNUMBER()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ORDER NUMBER", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1087
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1088
 await testRunner.GivenAsync("the input is 4001234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1089
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1090
 await testRunner.ThenAsync("the entity should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1091
     await testRunner.AndAsync("the AI should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1092
  await testRunner.AndAsync("the value should be 1234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1093
  await testRunner.AndAsync("the data value should be ORDER NUMBER", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1094
  await testRunner.AndAsync("the description should be Customer\'s purchase order number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1095
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1096
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GINC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GINC")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseGINC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GINC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1099
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1100
 await testRunner.GivenAsync("the input is 401506091751123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1101
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1102
 await testRunner.ThenAsync("the entity should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1103
     await testRunner.AndAsync("the AI should be 401", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1104
  await testRunner.AndAsync("the value should be 506091751123456", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1105
  await testRunner.AndAsync("the data value should be GINC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1106
  await testRunner.AndAsync("the description should be Global Identification Number for Consignment (GINC)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1107
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1108
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSIN")]
        [Xunit.TraitAttribute("Category", "N3+N17")]
        public async System.Threading.Tasks.Task ParseGSIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N17"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GSIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1112
 await testRunner.GivenAsync("the input is 40250609175112345629", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1113
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1114
 await testRunner.ThenAsync("the entity should be 402", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1115
     await testRunner.AndAsync("the AI should be 402", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1116
  await testRunner.AndAsync("the value should be 50609175112345629", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1117
  await testRunner.AndAsync("the data value should be GSIN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1118
  await testRunner.AndAsync("the description should be Global Shipment Identification Number (GSIN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1119
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1120
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ROUTE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ROUTE")]
        [Xunit.TraitAttribute("Category", "N3+X..30")]
        public async System.Threading.Tasks.Task ParseROUTE()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ROUTE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1124
 await testRunner.GivenAsync("the input is 403Routing+Code+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1125
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1126
 await testRunner.ThenAsync("the entity should be 403", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1127
     await testRunner.AndAsync("the AI should be 403", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1128
  await testRunner.AndAsync("the value should be Routing+Code+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1129
  await testRunner.AndAsync("the data value should be ROUTE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1130
  await testRunner.AndAsync("the description should be Routing code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1131
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1132
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParseSHIPTOLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1136
 await testRunner.GivenAsync("the input is 4105060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1137
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1138
 await testRunner.ThenAsync("the entity should be 410", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1139
     await testRunner.AndAsync("the AI should be 410", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1140
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1141
  await testRunner.AndAsync("the data value should be SHIP TO LOC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1142
  await testRunner.AndAsync("the description should be Ship to - Deliver to Global Location Number (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1143
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1144
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BILL TO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BILL TO")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParseBILLTO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BILL TO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1148
 await testRunner.GivenAsync("the input is 4115060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1149
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1150
 await testRunner.ThenAsync("the entity should be 411", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1151
     await testRunner.AndAsync("the AI should be 411", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1152
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1153
  await testRunner.AndAsync("the data value should be BILL TO", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1154
  await testRunner.AndAsync("the description should be Bill to - Invoice to Global Location Number (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1155
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1156
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PURCHASE FROM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PURCHASE FROM")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParsePURCHASEFROM()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PURCHASE FROM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1160
 await testRunner.GivenAsync("the input is 4125060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1161
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1162
 await testRunner.ThenAsync("the entity should be 412", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1163
     await testRunner.AndAsync("the AI should be 412", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1164
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1165
  await testRunner.AndAsync("the data value should be PURCHASE FROM", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1166
  await testRunner.AndAsync("the description should be Purchased from Global Location Number (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1167
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1168
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP FOR LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP FOR LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParseSHIPFORLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP FOR LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1172
 await testRunner.GivenAsync("the input is 4135060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1173
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1174
 await testRunner.ThenAsync("the entity should be 413", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1175
     await testRunner.AndAsync("the AI should be 413", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1176
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1177
  await testRunner.AndAsync("the data value should be SHIP FOR LOC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1178
  await testRunner.AndAsync("the description should be Ship for - Deliver for - Forward to Global Location Num" +
                        "ber (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1179
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1180
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse LOC No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse LOC No.")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParseLOCNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse LOC No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1184
 await testRunner.GivenAsync("the input is 4145060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1185
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1186
 await testRunner.ThenAsync("the entity should be 414", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1187
     await testRunner.AndAsync("the AI should be 414", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1188
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1189
  await testRunner.AndAsync("the data value should be LOC No.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1190
  await testRunner.AndAsync("the description should be Identification of a physical location - Global Location" +
                        " Number (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1191
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1192
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PAY TO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PAY TO")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParsePAYTO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PAY TO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1196
 await testRunner.GivenAsync("the input is 4155060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1197
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1198
 await testRunner.ThenAsync("the entity should be 415", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1199
     await testRunner.AndAsync("the AI should be 415", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1200
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1201
  await testRunner.AndAsync("the data value should be PAY TO", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1202
  await testRunner.AndAsync("the description should be Global Location Number (GLN) of the invoicing party", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1203
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1204
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD/SERV LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD/SERV LOC")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParsePRODSERVLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROD/SERV LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1208
 await testRunner.GivenAsync("the input is 4165060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1209
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1210
 await testRunner.ThenAsync("the entity should be 416", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1211
     await testRunner.AndAsync("the AI should be 416", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1212
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1213
  await testRunner.AndAsync("the data value should be PROD/SERV LOC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1214
  await testRunner.AndAsync("the description should be Global Location Number (GLN) of the production or servi" +
                        "ce location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1215
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1216
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PARTY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PARTY")]
        [Xunit.TraitAttribute("Category", "N3+N13")]
        public async System.Threading.Tasks.Task ParsePARTY()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PARTY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1220
 await testRunner.GivenAsync("the input is 4175060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1221
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1222
 await testRunner.ThenAsync("the entity should be 417", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1223
     await testRunner.AndAsync("the AI should be 417", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1224
  await testRunner.AndAsync("the value should be 5060917510004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1225
  await testRunner.AndAsync("the data value should be PARTY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1226
  await testRunner.AndAsync("the description should be Party Global Location Number (GLN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1227
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1228
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO POST")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO POST")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseSHIPTOPOST()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO POST", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1232
 await testRunner.GivenAsync("the input is 420SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1233
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1234
 await testRunner.ThenAsync("the entity should be 420", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1235
     await testRunner.AndAsync("the AI should be 420", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1236
  await testRunner.AndAsync("the value should be SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1237
  await testRunner.AndAsync("the data value should be SHIP TO POST", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1238
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to postal code within a single postal" +
                        " authority", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1239
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1240
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO POST ISO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO POST ISO")]
        [Xunit.TraitAttribute("Category", "N3+N3+X..9")]
        public async System.Threading.Tasks.Task ParseSHIPTOPOSTISO()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+X..9"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO POST ISO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1243
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1244
 await testRunner.GivenAsync("the input is 421826SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1245
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1246
 await testRunner.ThenAsync("the entity should be 421", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1247
     await testRunner.AndAsync("the AI should be 421", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1248
  await testRunner.AndAsync("the value should be 826SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1249
  await testRunner.AndAsync("the data value should be SHIP TO POST", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1250
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to postal code with three-digit ISO c" +
                        "ountry code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1251
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1252
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORIGIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORIGIN")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public async System.Threading.Tasks.Task ParseORIGIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ORIGIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1255
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1256
 await testRunner.GivenAsync("the input is 422826", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1257
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1258
 await testRunner.ThenAsync("the entity should be 422", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1259
     await testRunner.AndAsync("the AI should be 422", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1260
  await testRunner.AndAsync("the value should be 826", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1261
  await testRunner.AndAsync("the data value should be ORIGIN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1262
  await testRunner.AndAsync("the description should be Country of origin of a trade item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1263
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1264
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - INITIAL PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - INITIAL PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3+N..12")]
        public async System.Threading.Tasks.Task ParseCOUNTRY_INITIALPROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUNTRY - INITIAL PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1267
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1268
 await testRunner.GivenAsync("the input is 423826", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1269
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1270
 await testRunner.ThenAsync("the entity should be 423", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1271
     await testRunner.AndAsync("the AI should be 423", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1272
  await testRunner.AndAsync("the value should be 826", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1273
  await testRunner.AndAsync("the data value should be COUNTRY - INITIAL PROCESS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1274
  await testRunner.AndAsync("the description should be Country of initial processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1275
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1276
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public async System.Threading.Tasks.Task ParseCOUNTRY_PROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUNTRY - PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1279
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1280
 await testRunner.GivenAsync("the input is 424826", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1281
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1282
 await testRunner.ThenAsync("the entity should be 424", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1283
     await testRunner.AndAsync("the AI should be 424", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1284
  await testRunner.AndAsync("the value should be 826", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1285
  await testRunner.AndAsync("the data value should be COUNTRY - PROCESS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1286
  await testRunner.AndAsync("the description should be Country of processing", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1287
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1288
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY - DISASSEMBLY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY - DISASSEMBLY")]
        [Xunit.TraitAttribute("Category", "N3+N3+N..12")]
        public async System.Threading.Tasks.Task ParseCOUNTRY_DISASSEMBLY()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUNTRY - DISASSEMBLY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1291
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1292
 await testRunner.GivenAsync("the input is 425826", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1293
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1294
 await testRunner.ThenAsync("the entity should be 425", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1295
     await testRunner.AndAsync("the AI should be 425", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1296
  await testRunner.AndAsync("the value should be 826", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1297
  await testRunner.AndAsync("the data value should be COUNTRY - DISASSEMBLY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1298
  await testRunner.AndAsync("the description should be Country of disassembly", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1299
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1300
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUNTRY – FULL PROCESS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUNTRY – FULL PROCESS")]
        [Xunit.TraitAttribute("Category", "N3+N3")]
        public async System.Threading.Tasks.Task ParseCOUNTRYFULLPROCESS()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+N3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUNTRY – FULL PROCESS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1303
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1304
 await testRunner.GivenAsync("the input is 426826", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1305
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1306
 await testRunner.ThenAsync("the entity should be 426", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1307
     await testRunner.AndAsync("the AI should be 426", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1308
  await testRunner.AndAsync("the value should be 826", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1309
  await testRunner.AndAsync("the data value should be COUNTRY – FULL PROCESS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1310
  await testRunner.AndAsync("the description should be Country covering full process chain", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1311
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1312
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ORIGIN SUBDIVISION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ORIGIN SUBDIVISION")]
        [Xunit.TraitAttribute("Category", "N3+X..3")]
        public async System.Threading.Tasks.Task ParseORIGINSUBDIVISION()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ORIGIN SUBDIVISION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1316
 await testRunner.GivenAsync("the input is 427ENG", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1317
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1318
 await testRunner.ThenAsync("the entity should be 427", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1319
     await testRunner.AndAsync("the AI should be 427", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1320
  await testRunner.AndAsync("the value should be ENG", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1321
  await testRunner.AndAsync("the data value should be ORIGIN SUBDIVISION", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1322
  await testRunner.AndAsync("the description should be Country subdivision of origin code for a trade item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1323
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1324
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO COMP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO COMP")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public async System.Threading.Tasks.Task ParseSHIPTOCOMP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO COMP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1327
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1328
 await testRunner.GivenAsync("the input is 4300Acme+Corp", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1329
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1330
 await testRunner.ThenAsync("the entity should be 4300", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1331
     await testRunner.AndAsync("the AI should be 4300", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1332
  await testRunner.AndAsync("the value should be Acme+Corp", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1333
  await testRunner.AndAsync("the data value should be SHIP TO COMP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1334
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to Company name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1335
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1336
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public async System.Threading.Tasks.Task ParseSHIPTONAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1340
 await testRunner.GivenAsync("the input is 4301John+Smith", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1341
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1342
 await testRunner.ThenAsync("the entity should be 4301", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1343
     await testRunner.AndAsync("the AI should be 4301", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1344
  await testRunner.AndAsync("the value should be John+Smith", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1345
  await testRunner.AndAsync("the data value should be SHIP TO NAME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1346
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to contact name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1347
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1348
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO ADD1")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO ADD1")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseSHIPTOADD1()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO ADD1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1351
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1352
 await testRunner.GivenAsync("the input is 4302100+Acadia+Avenue", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1353
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1354
 await testRunner.ThenAsync("the entity should be 4302", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1355
     await testRunner.AndAsync("the AI should be 4302", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1356
  await testRunner.AndAsync("the value should be 100+Acadia+Avenue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1357
  await testRunner.AndAsync("the data value should be SHIP TO ADD1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1358
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to address line 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1359
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1360
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO ADD2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO ADD2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseSHIPTOADD2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO ADD2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1363
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1364
 await testRunner.GivenAsync("the input is 4303Noborough", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1365
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1366
 await testRunner.ThenAsync("the entity should be 4303", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1367
     await testRunner.AndAsync("the AI should be 4303", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1368
  await testRunner.AndAsync("the value should be Noborough", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1369
  await testRunner.AndAsync("the data value should be SHIP TO ADD2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1370
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to address line 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1371
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1372
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO SUB")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO SUB")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseSHIPTOSUB()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO SUB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1375
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1376
 await testRunner.GivenAsync("the input is 4304Lower+District", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1377
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1378
 await testRunner.ThenAsync("the entity should be 4304", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1379
     await testRunner.AndAsync("the AI should be 4304", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1380
  await testRunner.AndAsync("the value should be Lower+District", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1381
  await testRunner.AndAsync("the data value should be SHIP TO SUB", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1382
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to suburb", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1383
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1384
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO LOCALITY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO LOCALITY")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseSHIPTOLOCALITY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO LOCALITY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1387
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1388
 await testRunner.GivenAsync("the input is 4305Anytown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1389
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1390
 await testRunner.ThenAsync("the entity should be 4305", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1391
     await testRunner.AndAsync("the AI should be 4305", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1392
  await testRunner.AndAsync("the value should be Anytown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1393
  await testRunner.AndAsync("the data value should be SHIP TO LOC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1394
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to locality", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1395
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1396
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO REG")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO REG")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseSHIPTOREG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO REG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1399
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1400
 await testRunner.GivenAsync("the input is 4306United+Kingdom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1401
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1402
 await testRunner.ThenAsync("the entity should be 4306", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1403
     await testRunner.AndAsync("the AI should be 4306", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1404
  await testRunner.AndAsync("the value should be United+Kingdom", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1405
  await testRunner.AndAsync("the data value should be SHIP TO REG", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1406
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to region", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1407
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1408
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO COUNTRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO COUNTRY")]
        [Xunit.TraitAttribute("Category", "N4+X2")]
        public async System.Threading.Tasks.Task ParseSHIPTOCOUNTRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO COUNTRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1411
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1412
 await testRunner.GivenAsync("the input is 4307GB", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1413
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1414
 await testRunner.ThenAsync("the entity should be 4307", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1415
     await testRunner.AndAsync("the AI should be 4307", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1416
  await testRunner.AndAsync("the value should be GB", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1417
  await testRunner.AndAsync("the data value should be SHIP TO COUNTRY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1418
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to country code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1419
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1420
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO PHONE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO PHONE")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public async System.Threading.Tasks.Task ParseSHIPTOPHONE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO PHONE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1423
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1424
 await testRunner.GivenAsync("the input is 4308+32-2-788-78-00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1425
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1426
 await testRunner.ThenAsync("the entity should be 4308", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1427
     await testRunner.AndAsync("the AI should be 4308", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1428
  await testRunner.AndAsync("the value should be +32-2-788-78-00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1429
  await testRunner.AndAsync("the data value should be SHIP TO PHONE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1430
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to telephone number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1431
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1432
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SHIP TO GEO")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SHIP TO GEO")]
        [Xunit.TraitAttribute("Category", "N4+N20")]
        public async System.Threading.Tasks.Task ParseSHIPTOGEO()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SHIP TO GEO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1435
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1436
 await testRunner.GivenAsync("the input is 430902790858483015297971", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1437
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1438
 await testRunner.ThenAsync("the entity should be 4309", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1439
     await testRunner.AndAsync("the AI should be 4309", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1440
  await testRunner.AndAsync("the value should be 02790858483015297971", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1441
  await testRunner.AndAsync("the data value should be SHIP TO GEO", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1442
  await testRunner.AndAsync("the description should be Ship-to / Deliver-to GEO location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1443
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1444
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO COMP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO COMP")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public async System.Threading.Tasks.Task ParseRTNTOCOMP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO COMP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1447
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1448
 await testRunner.GivenAsync("the input is 4310Acme+Corp", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1449
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1450
 await testRunner.ThenAsync("the entity should be 4310", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1451
     await testRunner.AndAsync("the AI should be 4310", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1452
  await testRunner.AndAsync("the value should be Acme+Corp", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1453
  await testRunner.AndAsync("the data value should be RTN TO COMP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1454
  await testRunner.AndAsync("the description should be Return-to company name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1455
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1456
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public async System.Threading.Tasks.Task ParseRTNTONAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1459
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1460
 await testRunner.GivenAsync("the input is 4311John+Smith", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1461
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1462
 await testRunner.ThenAsync("the entity should be 4311", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1463
     await testRunner.AndAsync("the AI should be 4311", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1464
  await testRunner.AndAsync("the value should be John+Smith", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1465
  await testRunner.AndAsync("the data value should be RTN TO NAME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1466
  await testRunner.AndAsync("the description should be Return-to contact name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1467
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1468
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO ADD1")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO ADD1")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseRTNTOADD1()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO ADD1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1471
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1472
 await testRunner.GivenAsync("the input is 4312100+Acadia+Avenue", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1473
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1474
 await testRunner.ThenAsync("the entity should be 4312", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1475
     await testRunner.AndAsync("the AI should be 4312", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1476
  await testRunner.AndAsync("the value should be 100+Acadia+Avenue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1477
  await testRunner.AndAsync("the data value should be RTN TO ADD1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1478
  await testRunner.AndAsync("the description should be Return-to address line 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1479
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1480
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO ADD2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO ADD2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseRTNTOADD2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO ADD2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1483
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1484
 await testRunner.GivenAsync("the input is 4313Noborough", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1485
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1486
 await testRunner.ThenAsync("the entity should be 4313", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1487
     await testRunner.AndAsync("the AI should be 4313", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1488
  await testRunner.AndAsync("the value should be Noborough", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1489
  await testRunner.AndAsync("the data value should be RTN TO ADD2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1490
  await testRunner.AndAsync("the description should be Return-to address line 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1491
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1492
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO SUB")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO SUB")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseRTNTOSUB()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO SUB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1495
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1496
 await testRunner.GivenAsync("the input is 4314Lower+District", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1497
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1498
 await testRunner.ThenAsync("the entity should be 4314", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1499
     await testRunner.AndAsync("the AI should be 4314", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1500
  await testRunner.AndAsync("the value should be Lower+District", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1501
  await testRunner.AndAsync("the data value should be RTN TO SUB", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1502
  await testRunner.AndAsync("the description should be Return-to suburb", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1503
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1504
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO LOC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO LOC")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseRTNTOLOC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO LOC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1507
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1508
 await testRunner.GivenAsync("the input is 4315Anytown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1509
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1510
 await testRunner.ThenAsync("the entity should be 4315", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1511
     await testRunner.AndAsync("the AI should be 4315", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1512
  await testRunner.AndAsync("the value should be Anytown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1513
  await testRunner.AndAsync("the data value should be RTN TO LOC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1514
  await testRunner.AndAsync("the description should be Return-to locality", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1515
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1516
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO REG")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO REG")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseRTNTOREG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO REG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1519
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1520
 await testRunner.GivenAsync("the input is 4316United+Kingdom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1521
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1522
 await testRunner.ThenAsync("the entity should be 4316", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1523
     await testRunner.AndAsync("the AI should be 4316", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1524
  await testRunner.AndAsync("the value should be United+Kingdom", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1525
  await testRunner.AndAsync("the data value should be RTN TO REG", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1526
  await testRunner.AndAsync("the description should be Return-to region", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1527
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1528
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO COUNTRY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO COUNTRY")]
        [Xunit.TraitAttribute("Category", "N4+X2")]
        public async System.Threading.Tasks.Task ParseRTNTOCOUNTRY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO COUNTRY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1531
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1532
 await testRunner.GivenAsync("the input is 4317GB", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1533
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1534
 await testRunner.ThenAsync("the entity should be 4317", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1535
     await testRunner.AndAsync("the AI should be 4317", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1536
  await testRunner.AndAsync("the value should be GB", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1537
  await testRunner.AndAsync("the data value should be RTN TO COUNTRY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1538
  await testRunner.AndAsync("the description should be Return-to country code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1539
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1540
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO POST")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO POST")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseRTNTOPOST()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO POST", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1543
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1544
 await testRunner.GivenAsync("the input is 4318SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1545
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1546
 await testRunner.ThenAsync("the entity should be 4318", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1547
     await testRunner.AndAsync("the AI should be 4318", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1548
  await testRunner.AndAsync("the value should be SE220PF", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1549
  await testRunner.AndAsync("the data value should be RTN TO POST", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1550
  await testRunner.AndAsync("the description should be Return-to postal code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1551
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1552
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse RTN TO PHONE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse RTN TO PHONE")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public async System.Threading.Tasks.Task ParseRTNTOPHONE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse RTN TO PHONE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1555
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1556
 await testRunner.GivenAsync("the input is 4319+32-2-788-78-00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1557
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1558
 await testRunner.ThenAsync("the entity should be 4319", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1559
     await testRunner.AndAsync("the AI should be 4319", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1560
  await testRunner.AndAsync("the value should be +32-2-788-78-00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1561
  await testRunner.AndAsync("the data value should be RTN TO PHONE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1562
  await testRunner.AndAsync("the description should be Return-to telephone number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1563
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1564
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SRV DESCRIPTION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SRV DESCRIPTION")]
        [Xunit.TraitAttribute("Category", "N4+X..35")]
        public async System.Threading.Tasks.Task ParseSRVDESCRIPTION()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..35"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SRV DESCRIPTION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1567
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1568
 await testRunner.GivenAsync("the input is 4320Service+code+description+12345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1569
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1570
 await testRunner.ThenAsync("the entity should be 4320", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1571
     await testRunner.AndAsync("the AI should be 4320", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1572
  await testRunner.AndAsync("the value should be Service+code+description+12345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1573
  await testRunner.AndAsync("the data value should be SRV DESCRIPTION", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1574
  await testRunner.AndAsync("the description should be Service code description", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1575
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1576
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DANGEROUS GOODS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DANGEROUS GOODS")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public async System.Threading.Tasks.Task ParseDANGEROUSGOODS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DANGEROUS GOODS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1579
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1580
 await testRunner.GivenAsync("the input is 43211", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1581
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1582
 await testRunner.ThenAsync("the entity should be 4321", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1583
     await testRunner.AndAsync("the AI should be 4321", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1584
  await testRunner.AndAsync("the value should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1585
  await testRunner.AndAsync("the data value should be DANGEROUS GOODS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1586
  await testRunner.AndAsync("the description should be Dangerous goods flag", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1587
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1588
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AUTH LEAVE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AUTH LEAVE")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public async System.Threading.Tasks.Task ParseAUTHLEAVE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AUTH LEAVE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1592
 await testRunner.GivenAsync("the input is 43221", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1593
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1594
 await testRunner.ThenAsync("the entity should be 4322", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1595
     await testRunner.AndAsync("the AI should be 4322", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1596
  await testRunner.AndAsync("the value should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1597
  await testRunner.AndAsync("the data value should be AUTH LEAVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1598
  await testRunner.AndAsync("the description should be Authority to leave flag", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1599
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1600
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SIG REQUIRED")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SIG REQUIRED")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public async System.Threading.Tasks.Task ParseSIGREQUIRED()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SIG REQUIRED", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1603
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1604
 await testRunner.GivenAsync("the input is 43231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1605
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1606
 await testRunner.ThenAsync("the entity should be 4323", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1607
     await testRunner.AndAsync("the AI should be 4323", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1608
  await testRunner.AndAsync("the value should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1609
  await testRunner.AndAsync("the data value should be SIG REQUIRED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1610
  await testRunner.AndAsync("the description should be Signature required flag", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1611
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1612
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NBEF DEL DT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NBEF DEL DT")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public async System.Threading.Tasks.Task ParseNBEFDELDT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NBEF DEL DT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1615
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1616
 await testRunner.GivenAsync("the input is 43242312310900", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1617
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1618
 await testRunner.ThenAsync("the entity should be 4324", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1619
     await testRunner.AndAsync("the AI should be 4324", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1620
  await testRunner.AndAsync("the value should be 2312310900", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1621
  await testRunner.AndAsync("the data value should be NBEF DEL DT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1622
  await testRunner.AndAsync("the description should be Not before delivery date/time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1623
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1624
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NAFT DEL DT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NAFT DEL DT")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public async System.Threading.Tasks.Task ParseNAFTDELDT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NAFT DEL DT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1627
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1628
 await testRunner.GivenAsync("the input is 43252312311700", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1629
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1630
 await testRunner.ThenAsync("the entity should be 4325", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1631
     await testRunner.AndAsync("the AI should be 4325", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1632
  await testRunner.AndAsync("the value should be 2312311700", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1633
  await testRunner.AndAsync("the data value should be NAFT DEL DT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1634
  await testRunner.AndAsync("the description should be Not after delivery date/time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1635
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1636
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REL DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REL DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseRELDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse REL DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1639
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1640
 await testRunner.GivenAsync("the input is 4326231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1641
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1642
 await testRunner.ThenAsync("the entity should be 4326", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1643
     await testRunner.AndAsync("the AI should be 4326", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1644
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1645
  await testRunner.AndAsync("the data value should be REL DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1646
  await testRunner.AndAsync("the description should be Release date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1647
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1648
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MAX TEMP F")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MAX TEMP F")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseMAXTEMPF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MAX TEMP F", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1651
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1652
 await testRunner.GivenAsync("the input is 4330023020", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1653
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1654
 await testRunner.ThenAsync("the entity should be 4330", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1655
     await testRunner.AndAsync("the AI should be 4330", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1656
  await testRunner.AndAsync("the value should be 023020", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1657
  await testRunner.AndAsync("the data value should be MAX TEMP F", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1658
  await testRunner.AndAsync("the description should be Maximum temperature in Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1659
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1660
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MAX TEMP C")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MAX TEMP C")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseMAXTEMPC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MAX TEMP C", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1663
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1664
 await testRunner.GivenAsync("the input is 4331000090", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1665
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1666
 await testRunner.ThenAsync("the entity should be 4331", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1667
     await testRunner.AndAsync("the AI should be 4331", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1668
  await testRunner.AndAsync("the value should be 000090", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1669
  await testRunner.AndAsync("the data value should be MAX TEMP C", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1670
  await testRunner.AndAsync("the description should be Maximum temperature in Celsius", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1671
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1672
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MIN TEMP F")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MIN TEMP F")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseMINTEMPF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MIN TEMP F", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1675
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1676
 await testRunner.GivenAsync("the input is 4332023020", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1677
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1678
 await testRunner.ThenAsync("the entity should be 4332", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1679
     await testRunner.AndAsync("the AI should be 4332", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1680
  await testRunner.AndAsync("the value should be 023020", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1681
  await testRunner.AndAsync("the data value should be MIN TEMP F", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1682
  await testRunner.AndAsync("the description should be Minimum temperature in Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1683
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1684
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MIN TEMP C")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MIN TEMP C")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseMINTEMPC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MIN TEMP C", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1687
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1688
 await testRunner.GivenAsync("the input is 4333000090", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1689
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1690
 await testRunner.ThenAsync("the entity should be 4333", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1691
     await testRunner.AndAsync("the AI should be 4333", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1692
  await testRunner.AndAsync("the value should be 000090", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1693
  await testRunner.AndAsync("the data value should be MIN TEMP C", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1694
  await testRunner.AndAsync("the description should be Minimum temperature in Celsius", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1695
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1696
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse negative MAX TEMP F")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse negative MAX TEMP F")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseNegativeMAXTEMPF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse negative MAX TEMP F", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1699
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1700
 await testRunner.GivenAsync("the input is 4330000250-", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1701
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1702
 await testRunner.ThenAsync("the entity should be 4330", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1703
     await testRunner.AndAsync("the AI should be 4330", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1704
  await testRunner.AndAsync("the value should be 000250-", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1705
  await testRunner.AndAsync("the data value should be MAX TEMP F", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1706
  await testRunner.AndAsync("the description should be Maximum temperature in Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1707
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1708
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse negative MAX TEMP C")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse negative MAX TEMP C")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseNegativeMAXTEMPC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse negative MAX TEMP C", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1711
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1712
 await testRunner.GivenAsync("the input is 4331001000-", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1713
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1714
 await testRunner.ThenAsync("the entity should be 4331", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1715
     await testRunner.AndAsync("the AI should be 4331", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1716
  await testRunner.AndAsync("the value should be 001000-", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1717
  await testRunner.AndAsync("the data value should be MAX TEMP C", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1718
  await testRunner.AndAsync("the description should be Maximum temperature in Celsius", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1719
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1720
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse negative MIN TEMP F")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse negative MIN TEMP F")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseNegativeMINTEMPF()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse negative MIN TEMP F", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1723
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1724
 await testRunner.GivenAsync("the input is 4332000250-", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1725
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1726
 await testRunner.ThenAsync("the entity should be 4332", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1727
     await testRunner.AndAsync("the AI should be 4332", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1728
  await testRunner.AndAsync("the value should be 000250-", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1729
  await testRunner.AndAsync("the data value should be MIN TEMP F", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1730
  await testRunner.AndAsync("the description should be Minimum temperature in Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1731
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1732
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse negative MIN TEMP C")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse negative MIN TEMP C")]
        [Xunit.TraitAttribute("Category", "N4+N6+[-]")]
        public async System.Threading.Tasks.Task ParseNegativeMINTEMPC()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6+[-]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse negative MIN TEMP C", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1735
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1736
 await testRunner.GivenAsync("the input is 4333001000-", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1737
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1738
 await testRunner.ThenAsync("the entity should be 4333", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1739
     await testRunner.AndAsync("the AI should be 4333", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1740
  await testRunner.AndAsync("the value should be 001000-", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1741
  await testRunner.AndAsync("the data value should be MIN TEMP C", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1742
  await testRunner.AndAsync("the description should be Minimum temperature in Celsius", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1743
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1744
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NSN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NSN")]
        [Xunit.TraitAttribute("Category", "N4+N13")]
        public async System.Threading.Tasks.Task ParseNSN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N13"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NSN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1747
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1748
 await testRunner.GivenAsync("the input is 70015310997032519", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1749
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1750
 await testRunner.ThenAsync("the entity should be 7001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1751
     await testRunner.AndAsync("the AI should be 7001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1752
  await testRunner.AndAsync("the value should be 5310997032519", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1753
  await testRunner.AndAsync("the data value should be NSN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1754
  await testRunner.AndAsync("the description should be NATO Stock Number (NSN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1755
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1756
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MEAT CUT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MEAT CUT")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public async System.Threading.Tasks.Task ParseMEATCUT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MEAT CUT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1759
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1760
 await testRunner.GivenAsync("the input is 700244932211340000145100", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1761
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1762
 await testRunner.ThenAsync("the entity should be 7002", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1763
     await testRunner.AndAsync("the AI should be 7002", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1764
  await testRunner.AndAsync("the value should be 44932211340000145100", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1765
  await testRunner.AndAsync("the data value should be MEAT CUT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1766
  await testRunner.AndAsync("the description should be UNECE meat carcasses and cuts classification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1767
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1768
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse EXPIRY TIME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse EXPIRY TIME")]
        [Xunit.TraitAttribute("Category", "N4+N10")]
        public async System.Threading.Tasks.Task ParseEXPIRYTIME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse EXPIRY TIME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1771
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1772
 await testRunner.GivenAsync("the input is 70032312312359", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1773
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1774
 await testRunner.ThenAsync("the entity should be 7003", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1775
     await testRunner.AndAsync("the AI should be 7003", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1776
  await testRunner.AndAsync("the value should be 2312312359", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1777
  await testRunner.AndAsync("the data value should be EXPIRY TIME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1778
  await testRunner.AndAsync("the description should be Expiration date and time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1779
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1780
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ACTIVE POTENCY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ACTIVE POTENCY")]
        [Xunit.TraitAttribute("Category", "N4+N..4")]
        public async System.Threading.Tasks.Task ParseACTIVEPOTENCY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ACTIVE POTENCY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1783
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1784
 await testRunner.GivenAsync("the input is 70043001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1785
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1786
 await testRunner.ThenAsync("the entity should be 7004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1787
     await testRunner.AndAsync("the AI should be 7004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1788
  await testRunner.AndAsync("the value should be 3001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1789
  await testRunner.AndAsync("the data value should be ACTIVE POTENCY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1790
  await testRunner.AndAsync("the description should be Active potency", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1791
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1792
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CATCH AREA")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CATCH AREA")]
        [Xunit.TraitAttribute("Category", "N4+X..12")]
        public async System.Threading.Tasks.Task ParseCATCHAREA()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CATCH AREA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1795
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1796
 await testRunner.GivenAsync("the input is 700527.6.b.1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1797
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1798
 await testRunner.ThenAsync("the entity should be 7005", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1799
     await testRunner.AndAsync("the AI should be 7005", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1800
  await testRunner.AndAsync("the value should be 27.6.b.1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1801
  await testRunner.AndAsync("the data value should be CATCH AREA", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1802
  await testRunner.AndAsync("the description should be Catch area", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1803
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1804
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FIRST FREEZE DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FIRST FREEZE DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParseFIRSTFREEZEDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse FIRST FREEZE DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1807
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1808
 await testRunner.GivenAsync("the input is 7006231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1809
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1810
 await testRunner.ThenAsync("the entity should be 7006", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1811
     await testRunner.AndAsync("the AI should be 7006", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1812
  await testRunner.AndAsync("the value should be 231231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1813
  await testRunner.AndAsync("the data value should be FIRST FREEZE DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1814
  await testRunner.AndAsync("the description should be First freeze date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1815
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1816
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse HARVEST DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse HARVEST DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6[+N6]")]
        public async System.Threading.Tasks.Task ParseHARVESTDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6[+N6]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse HARVEST DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1819
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1820
 await testRunner.GivenAsync("the input is 7007230801230831", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1821
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1822
 await testRunner.ThenAsync("the entity should be 7007", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1823
     await testRunner.AndAsync("the AI should be 7007", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1824
  await testRunner.AndAsync("the value should be 230801230831", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1825
  await testRunner.AndAsync("the data value should be HARVEST DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1826
  await testRunner.AndAsync("the description should be Harvest date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1827
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1828
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AQUATIC SPECIES")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AQUATIC SPECIES")]
        [Xunit.TraitAttribute("Category", "N4+X..3")]
        public async System.Threading.Tasks.Task ParseAQUATICSPECIES()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AQUATIC SPECIES", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1831
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1832
 await testRunner.GivenAsync("the input is 7008BWQ", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1833
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1834
 await testRunner.ThenAsync("the entity should be 7008", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1835
     await testRunner.AndAsync("the AI should be 7008", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1836
  await testRunner.AndAsync("the value should be BWQ", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1837
  await testRunner.AndAsync("the data value should be AQUATIC SPECIES", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1838
  await testRunner.AndAsync("the description should be Species for fishery purposes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1839
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1840
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FISHING GEAR TYPE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FISHING GEAR TYPE")]
        [Xunit.TraitAttribute("Category", "N4+X..10")]
        public async System.Threading.Tasks.Task ParseFISHINGGEARTYPE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse FISHING GEAR TYPE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1843
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1844
 await testRunner.GivenAsync("the input is 700901.1.1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1845
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1846
 await testRunner.ThenAsync("the entity should be 7009", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1847
     await testRunner.AndAsync("the AI should be 7009", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1848
  await testRunner.AndAsync("the value should be 01.1.1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1849
  await testRunner.AndAsync("the data value should be FISHING GEAR TYPE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1850
  await testRunner.AndAsync("the description should be Fishing gear type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1851
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1852
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD METHOD")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD METHOD")]
        [Xunit.TraitAttribute("Category", "N4+X..2")]
        public async System.Threading.Tasks.Task ParsePRODMETHOD()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROD METHOD", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1855
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1856
 await testRunner.GivenAsync("the input is 701001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1857
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1858
 await testRunner.ThenAsync("the entity should be 7010", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1859
     await testRunner.AndAsync("the AI should be 7010", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1860
  await testRunner.AndAsync("the value should be 01", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1861
  await testRunner.AndAsync("the data value should be PROD METHOD", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1862
  await testRunner.AndAsync("the description should be Production method", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1863
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1864
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse TEST BY DATE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse TEST BY DATE")]
        [Xunit.TraitAttribute("Category", "N4+N6[+N4]")]
        public async System.Threading.Tasks.Task ParseTESTBYDATE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6[+N4]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse TEST BY DATE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1867
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1868
 await testRunner.GivenAsync("the input is 70112312311200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1869
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1870
 await testRunner.ThenAsync("the entity should be 7011", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1871
     await testRunner.AndAsync("the AI should be 7011", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1872
  await testRunner.AndAsync("the value should be 2312311200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1873
  await testRunner.AndAsync("the data value should be TEST BY DATE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1874
  await testRunner.AndAsync("the description should be Test by date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1875
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1876
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REFURB LOT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REFURB LOT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseREFURBLOT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse REFURB LOT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1879
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1880
 await testRunner.GivenAsync("the input is 7020ABC123DE", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1881
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1882
 await testRunner.ThenAsync("the entity should be 7020", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1883
     await testRunner.AndAsync("the AI should be 7020", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1884
  await testRunner.AndAsync("the value should be ABC123DE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1885
  await testRunner.AndAsync("the data value should be REFURB LOT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1886
  await testRunner.AndAsync("the description should be Refurbishment lot ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1887
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1888
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FUNC STAT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FUNC STAT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseFUNCSTAT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse FUNC STAT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1891
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1892
 await testRunner.GivenAsync("the input is 7021Functional+status+01", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1893
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1894
 await testRunner.ThenAsync("the entity should be 7021", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1895
     await testRunner.AndAsync("the AI should be 7021", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1896
  await testRunner.AndAsync("the value should be Functional+status+01", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1897
  await testRunner.AndAsync("the data value should be FUNC STAT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1898
  await testRunner.AndAsync("the description should be Functional status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1899
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1900
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REV STAT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REV STAT")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseREVSTAT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse REV STAT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1903
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1904
 await testRunner.GivenAsync("the input is 7022Revision+status+01", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1905
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1906
 await testRunner.ThenAsync("the entity should be 7022", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1907
     await testRunner.AndAsync("the AI should be 7022", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1908
  await testRunner.AndAsync("the value should be Revision+status+01", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1909
  await testRunner.AndAsync("the data value should be REV STAT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1910
  await testRunner.AndAsync("the description should be Revision status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1911
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1912
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GIAI – ASSEMBLY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GIAI – ASSEMBLY")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public async System.Threading.Tasks.Task ParseGIAIASSEMBLY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GIAI – ASSEMBLY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1915
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1916
 await testRunner.GivenAsync("the input is 7023506091751ASSET+0001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1917
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1918
 await testRunner.ThenAsync("the entity should be 7023", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1919
     await testRunner.AndAsync("the AI should be 7023", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1920
  await testRunner.AndAsync("the value should be 506091751ASSET+0001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1921
  await testRunner.AndAsync("the data value should be GIAI – ASSEMBLY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1922
  await testRunner.AndAsync("the description should be Global Individual Asset Identifier of an assembly", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1923
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1924
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROCESSOR # s")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROCESSOR # s")]
        [Xunit.TraitAttribute("Category", "N4+N3+X..27")]
        public async System.Threading.Tasks.Task ParsePROCESSORS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N3+X..27"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROCESSOR # s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1927
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1928
 await testRunner.GivenAsync("the input is 7030826FSSC+22000+-+00020281", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1929
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1930
 await testRunner.ThenAsync("the entity should be 703", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1931
     await testRunner.AndAsync("the AI should be 7030", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1932
  await testRunner.AndAsync("the sequence number should be 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1933
  await testRunner.AndAsync("the value should be 826FSSC+22000+-+00020281", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1934
  await testRunner.AndAsync("the data value should be PROCESSOR # s", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1935
  await testRunner.AndAsync("the description should be Number of processor with three-digit ISO country code", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1936
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1937
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse UIC+EXT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse UIC+EXT")]
        [Xunit.TraitAttribute("Category", "N4+N1+X3")]
        public async System.Threading.Tasks.Task ParseUICEXT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1+X3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse UIC+EXT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1940
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1941
 await testRunner.GivenAsync("the input is 70403PA_", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1942
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1943
 await testRunner.ThenAsync("the entity should be 7040", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1944
     await testRunner.AndAsync("the AI should be 7040", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1945
  await testRunner.AndAsync("the value should be 3PA_", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1946
  await testRunner.AndAsync("the data value should be UIC+EXT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1947
  await testRunner.AndAsync("the description should be GS1 UIC with Extension 1 and Importer index", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1948
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1949
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse UFRGT UNIT TYPE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse UFRGT UNIT TYPE")]
        [Xunit.TraitAttribute("Category", "N4+N1..X4")]
        public async System.Threading.Tasks.Task ParseUFRGTUNITTYPE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1..X4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse UFRGT UNIT TYPE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1952
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1953
 await testRunner.GivenAsync("the input is 70411A", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1954
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1955
 await testRunner.ThenAsync("the entity should be 7041", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1956
     await testRunner.AndAsync("the AI should be 7041", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1957
  await testRunner.AndAsync("the value should be 1A", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1958
  await testRunner.AndAsync("the data value should be UFRGT UNIT TYPE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1959
  await testRunner.AndAsync("the description should be UN/CEFACT freight unit type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1960
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1961
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN PZN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN PZN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNPZN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN PZN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1964
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1965
 await testRunner.GivenAsync("the input is 7103675419", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1966
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1967
 await testRunner.ThenAsync("the entity should be 710", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1968
     await testRunner.AndAsync("the AI should be 710", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1969
  await testRunner.AndAsync("the value should be 3675419", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1970
  await testRunner.AndAsync("the data value should be NHRN PZN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1971
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Germa" +
                        "ny PZN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1972
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1973
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN CIP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN CIP")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNCIP()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN CIP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1976
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1977
 await testRunner.GivenAsync("the input is 7113400935974419", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1978
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1979
 await testRunner.ThenAsync("the entity should be 711", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1980
     await testRunner.AndAsync("the AI should be 711", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1981
  await testRunner.AndAsync("the value should be 3400935974419", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1982
  await testRunner.AndAsync("the data value should be NHRN CIP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1983
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Franc" +
                        "e CIP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1984
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1985
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN CN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN CN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN CN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 1988
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 1989
 await testRunner.GivenAsync("the input is 712384756.8", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 1990
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 1991
 await testRunner.ThenAsync("the entity should be 712", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 1992
     await testRunner.AndAsync("the AI should be 712", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1993
  await testRunner.AndAsync("the value should be 384756.8", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1994
  await testRunner.AndAsync("the data value should be NHRN CN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1995
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Spain" +
                        " CN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1996
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 1997
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN DRN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN DRN")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNDRN()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN DRN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2000
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2001
 await testRunner.GivenAsync("the input is 71340056320000011", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2002
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2003
 await testRunner.ThenAsync("the entity should be 713", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2004
     await testRunner.AndAsync("the AI should be 713", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2005
  await testRunner.AndAsync("the value should be 40056320000011", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2006
  await testRunner.AndAsync("the data value should be NHRN DRN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2007
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Brasi" +
                        "l DRN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2008
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2009
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN AIM")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN AIM")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNAIM()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN AIM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2012
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2013
 await testRunner.GivenAsync("the input is 714142199", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2014
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2015
 await testRunner.ThenAsync("the entity should be 714", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2016
     await testRunner.AndAsync("the AI should be 714", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2017
  await testRunner.AndAsync("the value should be 142199", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2018
  await testRunner.AndAsync("the data value should be NHRN AIM", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2019
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Portu" +
                        "gal AIM", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2020
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2021
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN NDC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN NDC")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNNDC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN NDC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2024
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2025
 await testRunner.GivenAsync("the input is 7150777310502", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2026
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2027
 await testRunner.ThenAsync("the entity should be 715", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2028
     await testRunner.AndAsync("the AI should be 715", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2029
  await testRunner.AndAsync("the value should be 0777310502", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2030
  await testRunner.AndAsync("the data value should be NHRN NDC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2031
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) - Unite" +
                        "d States of America NDC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2032
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2033
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse NHRN AIC")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse NHRN AIC")]
        [Xunit.TraitAttribute("Category", "N3+X..20")]
        public async System.Threading.Tasks.Task ParseNHRNAIC()
        {
            string[] tagsOfScenario = new string[] {
                    "N3+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse NHRN AIC", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2036
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2037
 await testRunner.GivenAsync("the input is 716A012345676", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2038
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2039
 await testRunner.ThenAsync("the entity should be 716", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2040
     await testRunner.AndAsync("the AI should be 716", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2041
  await testRunner.AndAsync("the value should be A012345676", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2042
  await testRunner.AndAsync("the data value should be NHRN AIC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2043
  await testRunner.AndAsync("the description should be National Healthcare Reimbursement Number (NHRN) – Italy" +
                        " AIC", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2044
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2045
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CERT # s")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CERT # s")]
        [Xunit.TraitAttribute("Category", "N4+X2+X..28")]
        public async System.Threading.Tasks.Task ParseCERTS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X2+X..28"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CERT # s", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2048
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2049
 await testRunner.GivenAsync("the input is 7230EMBABT-MED00108", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2050
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2051
 await testRunner.ThenAsync("the entity should be 723", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2052
     await testRunner.AndAsync("the AI should be 7230", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2053
  await testRunner.AndAsync("the sequence number should be 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2054
  await testRunner.AndAsync("the value should be EMBABT-MED00108", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2055
  await testRunner.AndAsync("the data value should be CERT # s", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2056
  await testRunner.AndAsync("the description should be Certification reference", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2057
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2058
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROTOCOL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROTOCOL")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParsePROTOCOL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROTOCOL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2061
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2062
 await testRunner.GivenAsync("the input is 7240CACZ885N2301E2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2063
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2064
 await testRunner.ThenAsync("the entity should be 7240", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2065
     await testRunner.AndAsync("the AI should be 7240", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2066
  await testRunner.AndAsync("the value should be CACZ885N2301E2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2067
  await testRunner.AndAsync("the data value should be PROTOCOL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2068
  await testRunner.AndAsync("the description should be Protocol ID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2069
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2070
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DOB")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DOB")]
        [Xunit.TraitAttribute("Category", "N4+N8")]
        public async System.Threading.Tasks.Task ParseDOB()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N8"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DOB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2073
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2074
 await testRunner.GivenAsync("the input is 725020240214", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2075
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2076
 await testRunner.ThenAsync("the entity should be 7250", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2077
     await testRunner.AndAsync("the AI should be 7250", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2078
  await testRunner.AndAsync("the value should be 20240214", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2079
  await testRunner.AndAsync("the data value should be DOB", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2080
  await testRunner.AndAsync("the description should be Date of birth", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2081
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2082
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DOB TIME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DOB TIME")]
        [Xunit.TraitAttribute("Category", "N4+N12")]
        public async System.Threading.Tasks.Task ParseDOBTIME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DOB TIME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2085
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2086
 await testRunner.GivenAsync("the input is 7251202402141743", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2087
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2088
 await testRunner.ThenAsync("the entity should be 7251", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2089
     await testRunner.AndAsync("the AI should be 7251", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2090
  await testRunner.AndAsync("the value should be 202402141743", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2091
  await testRunner.AndAsync("the data value should be DOB TIME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2092
  await testRunner.AndAsync("the description should be Date and time of birth", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2093
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2094
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BIO SEX")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BIO SEX")]
        [Xunit.TraitAttribute("Category", "N4+N1")]
        public async System.Threading.Tasks.Task ParseBIOSEX()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BIO SEX", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2097
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2098
 await testRunner.GivenAsync("the input is 72521", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2099
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2100
 await testRunner.ThenAsync("the entity should be 7252", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2101
     await testRunner.AndAsync("the AI should be 7252", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2102
  await testRunner.AndAsync("the value should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2103
  await testRunner.AndAsync("the data value should be BIO SEX", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2104
  await testRunner.AndAsync("the description should be Biological sex", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2105
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2106
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FAMILY NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FAMILY NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..40")]
        public async System.Threading.Tasks.Task ParseFAMILYNAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..40"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse FAMILY NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2110
 await testRunner.GivenAsync("the input is 7253Doe", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2111
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2112
 await testRunner.ThenAsync("the entity should be 7253", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2113
     await testRunner.AndAsync("the AI should be 7253", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2114
  await testRunner.AndAsync("the value should be Doe", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2115
  await testRunner.AndAsync("the data value should be FAMILY NAME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2116
  await testRunner.AndAsync("the description should be Family name of person", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2117
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2118
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GIVEN NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GIVEN NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..40")]
        public async System.Threading.Tasks.Task ParseGIVENNAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..40"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GIVEN NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2122
 await testRunner.GivenAsync("the input is 7254John", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2123
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2124
 await testRunner.ThenAsync("the entity should be 7254", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2125
     await testRunner.AndAsync("the AI should be 7254", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2126
  await testRunner.AndAsync("the value should be John", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2127
  await testRunner.AndAsync("the data value should be GIVEN NAME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2128
  await testRunner.AndAsync("the description should be Given name of person", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2129
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2130
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SUFFIX")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SUFFIX")]
        [Xunit.TraitAttribute("Category", "N4+X..10")]
        public async System.Threading.Tasks.Task ParseSUFFIX()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SUFFIX", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2134
 await testRunner.GivenAsync("the input is 7255Junior", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2135
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2136
 await testRunner.ThenAsync("the entity should be 7255", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2137
     await testRunner.AndAsync("the AI should be 7255", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2138
  await testRunner.AndAsync("the value should be Junior", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2139
  await testRunner.AndAsync("the data value should be SUFFIX", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2140
  await testRunner.AndAsync("the description should be Name suffix of person", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2141
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2142
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse FULL NAME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse FULL NAME")]
        [Xunit.TraitAttribute("Category", "N4+X..90")]
        public async System.Threading.Tasks.Task ParseFULLNAME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse FULL NAME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2146
 await testRunner.GivenAsync("the input is 7256Doe,John,Junior", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2147
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2148
 await testRunner.ThenAsync("the entity should be 7256", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2149
     await testRunner.AndAsync("the AI should be 7256", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2150
  await testRunner.AndAsync("the value should be Doe,John,Junior", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2151
  await testRunner.AndAsync("the data value should be FULL NAME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2152
  await testRunner.AndAsync("the description should be Full name of person", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2153
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2154
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PERSON ADDR")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PERSON ADDR")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParsePERSONADDR()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PERSON ADDR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2158
 await testRunner.GivenAsync("the input is 7257123+Main+St,+Anytown,+Anyregion,+12345", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2159
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2160
 await testRunner.ThenAsync("the entity should be 7257", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2161
     await testRunner.AndAsync("the AI should be 7257", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2162
  await testRunner.AndAsync("the value should be 123+Main+St,+Anytown,+Anyregion,+12345", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2163
  await testRunner.AndAsync("the data value should be PERSON ADDR", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2164
  await testRunner.AndAsync("the description should be Address of person", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2165
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2166
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BIRTH SEQUENCE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BIRTH SEQUENCE")]
        [Xunit.TraitAttribute("Category", "N4+N1+X1+N1")]
        public async System.Threading.Tasks.Task ParseBIRTHSEQUENCE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N1+X1+N1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BIRTH SEQUENCE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2170
 await testRunner.GivenAsync("the input is 72582/3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2171
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2172
 await testRunner.ThenAsync("the entity should be 7258", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2173
     await testRunner.AndAsync("the AI should be 7258", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2174
  await testRunner.AndAsync("the value should be 2/3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2175
  await testRunner.AndAsync("the data value should be BIRTH SEQUENCE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2176
  await testRunner.AndAsync("the description should be Baby birth sequence indicator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2177
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2178
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse BABY")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse BABY")]
        [Xunit.TraitAttribute("Category", "N4+X..40")]
        public async System.Threading.Tasks.Task ParseBABY()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..40"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse BABY", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2182
 await testRunner.GivenAsync("the input is 7259Alice+Betty", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2183
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2184
 await testRunner.ThenAsync("the entity should be 7259", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2185
     await testRunner.AndAsync("the AI should be 7259", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2186
  await testRunner.AndAsync("the value should be Alice+Betty", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2187
  await testRunner.AndAsync("the data value should be BABY", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2188
  await testRunner.AndAsync("the description should be Baby of family name", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2189
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2190
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse AIDC MEDIA TYPE")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse AIDC MEDIA TYPE")]
        [Xunit.TraitAttribute("Category", "N4+N2")]
        public async System.Threading.Tasks.Task ParseAIDCMEDIATYPE()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse AIDC MEDIA TYPE", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2194
 await testRunner.GivenAsync("the input is 724105", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2195
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2196
 await testRunner.ThenAsync("the entity should be 7241", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2197
     await testRunner.AndAsync("the AI should be 7241", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2198
  await testRunner.AndAsync("the value should be 05", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2199
  await testRunner.AndAsync("the data value should be AIDC MEDIA TYPE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2200
  await testRunner.AndAsync("the description should be AIDC media type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2201
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2202
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VCN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VCN")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public async System.Threading.Tasks.Task ParseVCN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VCN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2206
 await testRunner.GivenAsync("the input is 7242094672AG22L44", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2207
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2208
 await testRunner.ThenAsync("the entity should be 7242", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2209
     await testRunner.AndAsync("the AI should be 7242", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2210
  await testRunner.AndAsync("the value should be 094672AG22L44", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2211
  await testRunner.AndAsync("the data value should be VCN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2212
  await testRunner.AndAsync("the description should be Version Control Number (VCN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2213
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2214
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DIMENSIONS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DIMENSIONS")]
        [Xunit.TraitAttribute("Category", "N4+N14")]
        public async System.Threading.Tasks.Task ParseDIMENSIONS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DIMENSIONS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2218
 await testRunner.GivenAsync("the input is 800115000003056000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2219
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2220
 await testRunner.ThenAsync("the entity should be 8001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2221
     await testRunner.AndAsync("the AI should be 8001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2222
  await testRunner.AndAsync("the value should be 15000003056000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2223
  await testRunner.AndAsync("the data value should be DIMENSIONS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2224
  await testRunner.AndAsync("the description should be Roll products - width, length, core diameter, direction" +
                        ", splices", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2225
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2226
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CMT No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CMT No.")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseCMTNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CMT No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2229
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2230
 await testRunner.GivenAsync("the input is 8002RF1DB6K177Y", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2231
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2232
 await testRunner.ThenAsync("the entity should be 8002", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2233
     await testRunner.AndAsync("the AI should be 8002", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2234
  await testRunner.AndAsync("the value should be RF1DB6K177Y", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2235
  await testRunner.AndAsync("the data value should be CMT No.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2236
  await testRunner.AndAsync("the description should be Cellular mobile telephone identifier", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2237
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2238
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GRAI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GRAI")]
        [Xunit.TraitAttribute("Category", "N4+N14[+X..16]")]
        public async System.Threading.Tasks.Task ParseGRAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14[+X..16]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GRAI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2242
 await testRunner.GivenAsync("the input is 80030506091751000434B1UL09036", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2243
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2244
 await testRunner.ThenAsync("the entity should be 8003", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2245
     await testRunner.AndAsync("the AI should be 8003", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2246
  await testRunner.AndAsync("the value should be 0506091751000434B1UL09036", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2247
  await testRunner.AndAsync("the data value should be GRAI", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2248
  await testRunner.AndAsync("the description should be Global Returnable Asset Identifier (GRAI)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2249
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2250
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GIAI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GIAI")]
        [Xunit.TraitAttribute("Category", "N4+X..30")]
        public async System.Threading.Tasks.Task ParseGIAI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GIAI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2253
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2254
 await testRunner.GivenAsync("the input is 80045060917ASSET+0001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2255
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2256
 await testRunner.ThenAsync("the entity should be 8004", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2257
     await testRunner.AndAsync("the AI should be 8004", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2258
  await testRunner.AndAsync("the value should be 5060917ASSET+0001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2259
  await testRunner.AndAsync("the data value should be GIAI", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2260
  await testRunner.AndAsync("the description should be Global Individual Asset Identifier (GIAI)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2261
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2262
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRICE PER UNIT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRICE PER UNIT")]
        [Xunit.TraitAttribute("Category", "N4+N6")]
        public async System.Threading.Tasks.Task ParsePRICEPERUNIT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N6"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRICE PER UNIT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2266
 await testRunner.GivenAsync("the input is 8005000150", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2267
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2268
 await testRunner.ThenAsync("the entity should be 8005", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2269
     await testRunner.AndAsync("the AI should be 8005", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2270
  await testRunner.AndAsync("the value should be 000150", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2271
  await testRunner.AndAsync("the data value should be PRICE PER UNIT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2272
  await testRunner.AndAsync("the description should be Price per unit of measure", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2273
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2274
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ITIP")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ITIP")]
        [Xunit.TraitAttribute("Category", "N4+N14+N2+N2")]
        public async System.Threading.Tasks.Task ParseITIP()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14+N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ITIP", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2277
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2278
 await testRunner.GivenAsync("the input is 8006050609175100040102", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2279
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2280
 await testRunner.ThenAsync("the entity should be 8006", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2281
     await testRunner.AndAsync("the AI should be 8006", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2282
  await testRunner.AndAsync("the value should be 050609175100040102", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2283
  await testRunner.AndAsync("the data value should be ITIP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2284
  await testRunner.AndAsync("the description should be Identification of an individual trade item (ITIP) piece" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2285
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2286
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse IBAN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse IBAN")]
        [Xunit.TraitAttribute("Category", "N4+X..34")]
        public async System.Threading.Tasks.Task ParseIBAN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..34"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse IBAN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2289
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2290
 await testRunner.GivenAsync("the input is 8007GB82WEST12345698765432", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2291
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2292
 await testRunner.ThenAsync("the entity should be 8007", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2293
     await testRunner.AndAsync("the AI should be 8007", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2294
  await testRunner.AndAsync("the value should be GB82WEST12345698765432", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2295
  await testRunner.AndAsync("the data value should be IBAN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2296
  await testRunner.AndAsync("the description should be International Bank Account Number (IBAN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2297
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2298
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PROD TIME")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PROD TIME")]
        [Xunit.TraitAttribute("Category", "N4+N8[+N..4]")]
        public async System.Threading.Tasks.Task ParsePRODTIME()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N8[+N..4]"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PROD TIME", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2302
 await testRunner.GivenAsync("the input is 8008231231142652", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2303
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2304
 await testRunner.ThenAsync("the entity should be 8008", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2305
     await testRunner.AndAsync("the AI should be 8008", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2306
  await testRunner.AndAsync("the value should be 231231142652", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2307
  await testRunner.AndAsync("the data value should be PROD TIME", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2308
  await testRunner.AndAsync("the description should be Date and time of production", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2309
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2310
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse OPTSEN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse OPTSEN")]
        [Xunit.TraitAttribute("Category", "N4+X..50")]
        public async System.Threading.Tasks.Task ParseOPTSEN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..50"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse OPTSEN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2313
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2314
 await testRunner.GivenAsync("the input is 800901190531", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2315
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2316
 await testRunner.ThenAsync("the entity should be 8009", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2317
     await testRunner.AndAsync("the AI should be 8009", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2318
  await testRunner.AndAsync("the value should be 01190531", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2319
  await testRunner.AndAsync("the data value should be OPTSEN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2320
  await testRunner.AndAsync("the description should be Optically readable sensor indicator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2321
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2322
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPID")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPID")]
        [Xunit.TraitAttribute("Category", "N4+Y..30")]
        public async System.Threading.Tasks.Task ParseCPID()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+Y..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CPID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2326
 await testRunner.GivenAsync("the input is 8010506091751DR4529P327", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2327
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2328
 await testRunner.ThenAsync("the entity should be 8010", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2329
     await testRunner.AndAsync("the AI should be 8010", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2330
  await testRunner.AndAsync("the value should be 506091751DR4529P327", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2331
  await testRunner.AndAsync("the data value should be CPID", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2332
  await testRunner.AndAsync("the description should be Component/Part Identifier (CPID)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2333
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2334
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse CPID SERIAL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse CPID SERIAL")]
        [Xunit.TraitAttribute("Category", "N4+N..12")]
        public async System.Threading.Tasks.Task ParseCPIDSERIAL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..12"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse CPID SERIAL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2337
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2338
 await testRunner.GivenAsync("the input is 8011422393761701", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2339
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2340
 await testRunner.ThenAsync("the entity should be 8011", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2341
     await testRunner.AndAsync("the AI should be 8011", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2342
  await testRunner.AndAsync("the value should be 422393761701", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2343
  await testRunner.AndAsync("the data value should be CPID SERIAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2344
  await testRunner.AndAsync("the description should be Component/Part Identifier serial number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2345
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2346
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse VERSION")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse VERSION")]
        [Xunit.TraitAttribute("Category", "N4+X..20")]
        public async System.Threading.Tasks.Task ParseVERSION()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..20"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse VERSION", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2349
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2350
 await testRunner.GivenAsync("the input is 801215.0.4701.1001", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2351
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2352
 await testRunner.ThenAsync("the entity should be 8012", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2353
     await testRunner.AndAsync("the AI should be 8012", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2354
  await testRunner.AndAsync("the value should be 15.0.4701.1001", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2355
  await testRunner.AndAsync("the data value should be VERSION", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2356
  await testRunner.AndAsync("the description should be Software version", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2357
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2358
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GMN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GMN")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public async System.Threading.Tasks.Task ParseGMN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GMN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2361
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2362
 await testRunner.GivenAsync("the input is 80131987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2363
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2364
 await testRunner.ThenAsync("the entity should be 8013", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2365
     await testRunner.AndAsync("the AI should be 8013", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2366
  await testRunner.AndAsync("the value should be 1987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2367
  await testRunner.AndAsync("the data value should be GMN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2368
  await testRunner.AndAsync("the description should be Global Model Number (GMN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2369
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2370
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse MUDI")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse MUDI")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public async System.Threading.Tasks.Task ParseMUDI()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse MUDI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2374
 await testRunner.GivenAsync("the input is 80141987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2375
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2376
 await testRunner.ThenAsync("the entity should be 8014", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2377
     await testRunner.AndAsync("the AI should be 8014", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2378
  await testRunner.AndAsync("the value should be 1987654Ad4X4bL5ttr2310c2K", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2379
  await testRunner.AndAsync("the data value should be MUDI", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2380
  await testRunner.AndAsync("the description should be Highly Individualised Device Registration Identifier (H" +
                        "IDRI)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2381
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2382
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSRN - PROVIDER")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSRN - PROVIDER")]
        [Xunit.TraitAttribute("Category", "N4+N18")]
        public async System.Threading.Tasks.Task ParseGSRN_PROVIDER()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GSRN - PROVIDER", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2385
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2386
 await testRunner.GivenAsync("the input is 8017506091751000315180", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2387
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2388
 await testRunner.ThenAsync("the entity should be 8017", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2389
     await testRunner.AndAsync("the AI should be 8017", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2390
  await testRunner.AndAsync("the value should be 506091751000315180", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2391
  await testRunner.AndAsync("the data value should be GSRN - PROVIDER", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2392
  await testRunner.AndAsync("the description should be Global Service Relation Number (GSRN) to identify the r" +
                        "elationship between an organisation offering services and the provider of servic" +
                        "es", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2393
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2394
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse GSRN - RECIPIENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse GSRN - RECIPIENT")]
        [Xunit.TraitAttribute("Category", "N4+N18")]
        public async System.Threading.Tasks.Task ParseGSRN_RECIPIENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N18"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse GSRN - RECIPIENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2397
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2398
 await testRunner.GivenAsync("the input is 8018506091751000315180", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2399
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2400
 await testRunner.ThenAsync("the entity should be 8018", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2401
     await testRunner.AndAsync("the AI should be 8018", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2402
  await testRunner.AndAsync("the value should be 506091751000315180", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2403
  await testRunner.AndAsync("the data value should be GSRN - RECIPIENT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2404
  await testRunner.AndAsync("the description should be Global Service Relation Number (GSRN) to identify the r" +
                        "elationship between an organisation offering services and the recipient of servi" +
                        "ces", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2405
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2406
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse SRIN")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse SRIN")]
        [Xunit.TraitAttribute("Category", "N4+N..10")]
        public async System.Threading.Tasks.Task ParseSRIN()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N..10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse SRIN", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2409
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2410
 await testRunner.GivenAsync("the input is 801900499427", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2411
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2412
 await testRunner.ThenAsync("the entity should be 8019", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2413
     await testRunner.AndAsync("the AI should be 8019", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2414
  await testRunner.AndAsync("the value should be 00499427", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2415
  await testRunner.AndAsync("the data value should be SRIN", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2416
  await testRunner.AndAsync("the description should be Service Relation Instance Number (SRIN)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2417
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2418
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse REF No.")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse REF No.")]
        [Xunit.TraitAttribute("Category", "N4+X..25")]
        public async System.Threading.Tasks.Task ParseREFNo_()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..25"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse REF No.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2421
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2422
 await testRunner.GivenAsync("the input is 8020000B231297726310000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2423
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2424
 await testRunner.ThenAsync("the entity should be 8020", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2425
     await testRunner.AndAsync("the AI should be 8020", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2426
  await testRunner.AndAsync("the value should be 000B231297726310000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2427
  await testRunner.AndAsync("the data value should be REF No.", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2428
  await testRunner.AndAsync("the description should be Payment slip reference number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2429
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2430
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse ITIP CONTENT")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse ITIP CONTENT")]
        [Xunit.TraitAttribute("Category", "N4+N14+N2+N2")]
        public async System.Threading.Tasks.Task ParseITIPCONTENT()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N14+N2+N2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse ITIP CONTENT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2433
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2434
 await testRunner.GivenAsync("the input is 8026050609175100040102", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2435
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2436
 await testRunner.ThenAsync("the entity should be 8026", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2437
     await testRunner.AndAsync("the AI should be 8026", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2438
  await testRunner.AndAsync("the value should be 050609175100040102", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2439
  await testRunner.AndAsync("the data value should be ITIP CONTENT", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2440
  await testRunner.AndAsync("the description should be Identification of pieces of a trade item (ITIP) contain" +
                        "ed in a logistic unit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2441
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2442
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse DIGSIG")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse DIGSIG")]
        [Xunit.TraitAttribute("Category", "N4+Z..90")]
        public async System.Threading.Tasks.Task ParseDIGSIG()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+Z..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse DIGSIG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2445
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2446
 await testRunner.GivenAsync("the input is 80304170331922217434118608698152571122942338540538607194206986432366" +
                        "5892369845781264435120798=", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2447
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2448
 await testRunner.ThenAsync("the entity should be 8030", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2449
     await testRunner.AndAsync("the AI should be 8030", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2450
  await testRunner.AndAsync("the value should be 4170331922217434118608698152571122942338540538607194206986432" +
                        "3665892369845781264435120798=", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2451
  await testRunner.AndAsync("the data value should be DIGSIG", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2452
  await testRunner.AndAsync("the description should be Digital Signature (DigSig)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2453
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2454
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1a")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1a")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1A()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1a", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2457
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2458
 await testRunner.GivenAsync("the input is 8110106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2459
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2460
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2461
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2462
  await testRunner.AndAsync("the value should be 106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2463
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2464
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2465
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2466
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1b")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1b")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1B()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1b", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2469
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2470
 await testRunner.GivenAsync("the input is 81101061414165432131501101201211014092110256100126663101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2471
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2472
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2473
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2474
  await testRunner.AndAsync("the value should be 1061414165432131501101201211014092110256100126663101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2475
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2476
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2477
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2478
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1c")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1c")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1C()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1c", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2481
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2482
 await testRunner.GivenAsync("the input is 8110106141410012342501106501013085093101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2483
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2484
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2485
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2486
  await testRunner.AndAsync("the value should be 106141410012342501106501013085093101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2487
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2488
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2489
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2490
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1d")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1d")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1D()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1d", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2493
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2494
 await testRunner.GivenAsync("the input is 8110106141410012471011076011110850921108609310123191000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2495
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2496
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2497
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2498
  await testRunner.AndAsync("the value should be 106141410012471011076011110850921108609310123191000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2499
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2500
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2501
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2502
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1e")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1e")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1E()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1e", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2505
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2506
 await testRunner.GivenAsync("the input is 81101061414154321031501101201211014092110256100126663101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2507
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2508
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2509
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2510
  await testRunner.AndAsync("the value should be 1061414154321031501101201211014092110256100126663101231", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2511
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2512
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2513
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2514
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 1f")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 1f")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON1F()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 1f", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2517
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2518
 await testRunner.GivenAsync("the input is 8110106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2519
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2520
 await testRunner.ThenAsync("the entity should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2521
     await testRunner.AndAsync("the AI should be 8110", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2522
  await testRunner.AndAsync("the value should be 106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2523
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2524
  await testRunner.AndAsync("the description should be Coupon code identification for use in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2525
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2526
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse POINTS")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse POINTS")]
        [Xunit.TraitAttribute("Category", "N4+N4")]
        public async System.Threading.Tasks.Task ParsePOINTS()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+N4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse POINTS", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2529
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2530
 await testRunner.GivenAsync("the input is 81110310", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2531
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2532
 await testRunner.ThenAsync("the entity should be 8111", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2533
     await testRunner.AndAsync("the AI should be 8111", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2534
  await testRunner.AndAsync("the value should be 0310", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2535
  await testRunner.AndAsync("the data value should be POINTS", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2536
  await testRunner.AndAsync("the description should be Loyalty points of a coupon", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2537
  await testRunner.AndAsync("the length of the value should be fixed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2538
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse COUPON 2")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse COUPON 2")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParseCOUPON2()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse COUPON 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2541
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2542
 await testRunner.GivenAsync("the input is 8112106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2543
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2544
 await testRunner.ThenAsync("the entity should be 8112", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2545
     await testRunner.AndAsync("the AI should be 8112", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2546
  await testRunner.AndAsync("the value should be 106141416543213500110000310123196000", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2547
  await testRunner.AndAsync("the data value should be -", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2548
  await testRunner.AndAsync("the description should be Positive offer file coupon code identification for use " +
                        "in North America", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2549
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2550
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse PRODUCT URL")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse PRODUCT URL")]
        [Xunit.TraitAttribute("Category", "N4+X..70")]
        public async System.Threading.Tasks.Task ParsePRODUCTURL()
        {
            string[] tagsOfScenario = new string[] {
                    "N4+X..70"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse PRODUCT URL", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2553
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2554
 await testRunner.GivenAsync("the input is 8200https://acme.com/", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2555
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2556
 await testRunner.ThenAsync("the entity should be 8200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2557
     await testRunner.AndAsync("the AI should be 8200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2558
  await testRunner.AndAsync("the value should be https://acme.com/", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2559
  await testRunner.AndAsync("the data value should be PRODUCT URL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2560
  await testRunner.AndAsync("the description should be Extended packaging URL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2561
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2562
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 90")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 90")]
        [Xunit.TraitAttribute("Category", "N2+X..30")]
        public async System.Threading.Tasks.Task ParseINTERNAL90()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..30"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 90", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2565
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2566
 await testRunner.GivenAsync("the input is 90Some+information+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2567
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2568
 await testRunner.ThenAsync("the entity should be 90", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2569
     await testRunner.AndAsync("the AI should be 90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2570
  await testRunner.AndAsync("the value should be Some+information+1234", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2571
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2572
  await testRunner.AndAsync("the description should be Information mutually agreed between trading partners", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2573
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2574
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 91")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 91")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL91()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 91", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2577
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2578
 await testRunner.GivenAsync("the input is 91The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2579
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2580
 await testRunner.ThenAsync("the entity should be 91", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2581
     await testRunner.AndAsync("the AI should be 91", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2582
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2583
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2584
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2585
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2586
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 92")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 92")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL92()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 92", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2589
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2590
 await testRunner.GivenAsync("the input is 92The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2591
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2592
 await testRunner.ThenAsync("the entity should be 92", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2593
     await testRunner.AndAsync("the AI should be 92", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2594
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2595
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2596
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2597
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2598
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 93")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 93")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL93()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 93", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2601
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2602
 await testRunner.GivenAsync("the input is 93The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2603
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2604
 await testRunner.ThenAsync("the entity should be 93", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2605
     await testRunner.AndAsync("the AI should be 93", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2606
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2607
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2608
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2609
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2610
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 94")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 94")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL94()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 94", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2613
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2614
 await testRunner.GivenAsync("the input is 94The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2615
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2616
 await testRunner.ThenAsync("the entity should be 94", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2617
     await testRunner.AndAsync("the AI should be 94", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2618
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2619
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2620
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2621
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2622
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 95")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 95")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL95()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 95", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2625
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2626
 await testRunner.GivenAsync("the input is 95The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2627
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2628
 await testRunner.ThenAsync("the entity should be 95", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2629
     await testRunner.AndAsync("the AI should be 95", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2630
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2631
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2632
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2633
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2634
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 96")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 96")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL96()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 96", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2637
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2638
 await testRunner.GivenAsync("the input is 96The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2639
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2640
 await testRunner.ThenAsync("the entity should be 96", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2641
     await testRunner.AndAsync("the AI should be 96", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2642
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2643
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2644
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2645
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2646
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 97")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 97")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL97()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 97", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2649
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2650
 await testRunner.GivenAsync("the input is 97The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2651
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2652
 await testRunner.ThenAsync("the entity should be 97", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2653
     await testRunner.AndAsync("the AI should be 97", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2654
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2655
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2656
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2657
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2658
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 98")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 98")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL98()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 98", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2661
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2662
 await testRunner.GivenAsync("the input is 98The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2663
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2664
 await testRunner.ThenAsync("the entity should be 98", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2665
     await testRunner.AndAsync("the AI should be 98", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2666
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2667
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2668
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2669
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2670
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parse INTERNAL 99")]
        [Xunit.TraitAttribute("FeatureTitle", "ParseEntity")]
        [Xunit.TraitAttribute("Description", "Parse INTERNAL 99")]
        [Xunit.TraitAttribute("Category", "N2+X..90")]
        public async System.Threading.Tasks.Task ParseINTERNAL99()
        {
            string[] tagsOfScenario = new string[] {
                    "N2+X..90"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse INTERNAL 99", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 2673
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 2674
 await testRunner.GivenAsync("the input is 99The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+01234567890", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 2675
 await testRunner.WhenAsync("the input to submitted to the parser", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 2676
 await testRunner.ThenAsync("the entity should be 99", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 2677
     await testRunner.AndAsync("the AI should be 99", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2678
  await testRunner.AndAsync("the value should be The+quick+brown+fox+jumped+over+the+lazy+dog\'s+back+012345678" +
                        "90", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2679
  await testRunner.AndAsync("the data value should be INTERNAL", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2680
  await testRunner.AndAsync("the description should be Company internal information", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2681
  await testRunner.AndAsync("the length of the value should be variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 2682
  await testRunner.AndAsync("there should be no errors", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ParseEntityFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ParseEntityFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
